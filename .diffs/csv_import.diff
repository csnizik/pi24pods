Only in ./web/modules/custom/csv_import_csc: css
Files ./web/modules/custom/csv_import/csv_import.info.yml and ./web/modules/custom/csv_import_csc/csv_import.info.yml are identical
Files ./web/modules/custom/csv_import/csv_import.install and ./web/modules/custom/csv_import_csc/csv_import.install are identical
Only in ./web/modules/custom/csv_import_csc: csv_import.libraries.yml
Files ./web/modules/custom/csv_import/csv_import.module and ./web/modules/custom/csv_import_csc/csv_import.module are identical
diff --color --color -rus ./web/modules/custom/csv_import/csv_import.routing.yml ./web/modules/custom/csv_import_csc/csv_import.routing.yml
--- ./web/modules/custom/csv_import/csv_import.routing.yml	2023-11-03 08:50:25
+++ ./web/modules/custom/csv_import_csc/csv_import.routing.yml	2023-11-03 08:50:25
@@ -13,35 +13,362 @@
     _title: 'csv import workbook'
   requirements:
     _permission: 'access content'
-    
-csv_import.process_inputs:
-  path: '/csv_import/upload_inputs'
+
+csv_import.process_project_summary:
+  path: '/csv_import/upload_project_summary'
   defaults:
-    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_inputs'
-    _title: 'csv import inputs'
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_project_summary'
+    _title: 'csv import project_summary'
   requirements:
     _permission: 'access content'
 
-csv_import.process_soil_health_sample:
-  path: '/csv_import/upload_soil_health_sample'
+csv_import.process_market_activities:
+  path: '/csv_import/upload_market_activities'
   defaults:
-    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_soil_health_sample'
-    _title: 'csv import soil health sample'
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_market_activities'
+    _title: 'csv import market_activities'
   requirements:
     _permission: 'access content'
 
-csv_import.process_combo:
-  path: '/csv_import/upload_combo'
+csv_import.process_environmental_benefits:
+  path: '/csv_import/upload_environmental_benefits'
   defaults:
-    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_combo'
-    _title: 'csv import operations'
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_environmental_benefits'
+    _title: 'csv import environmental_benefits'
   requirements:
     _permission: 'access content'
 
-csv_import.process_soil_test_results:
-  path: '/csv_import/upload_soil_test_results'
+csv_import.process_farm_summary:
+  path: '/csv_import/upload_farm_summary'
   defaults:
-    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_soil_test_results'
-    _title: 'csv import operations'
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_farm_summary'
+    _title: 'csv import farm_summary'
+  requirements:
+    _permission: 'access content'
+
+csv_import.process_field_enrollment:
+  path: '/csv_import/upload_field_enrollment'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_field_enrollment'
+    _title: 'csv import field_enrollment'
+  requirements:
+    _permission: 'access content'
+
+csv_import.process_partner_activities:
+  path: '/csv_import/upload_partner_activities'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_partner_activities'
+    _title: 'csv import partner_activities'
+  requirements:
+    _permission: 'access content'
+
+csv_import.process_producer_enrollment:
+  path: '/csv_import/upload_producer_enrollment'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_producer_enrollment'
+    _title: 'csv import producer_enrollment'
+  requirements:
+    _permission: 'access content'
+
+csv_import.process_field_summary:
+  path: '/csv_import/upload_field_summary'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_field_summary'
+    _title: 'csv import field_summary'
+  requirements:
+    _permission: 'access content'
+
+csv_import.process_ghg_benefits_measured:
+  path: '/csv_import/upload_ghg_benefits_measured'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_ghg_benefits_measured'
+    _title: 'csv import ghg_benefits_measured'
+  requirements:
+    _permission: 'access content'
+
+csv_import.ghg_benefits_alternate_modeled:
+  path: '/csv_import/upload_ghg_benefits_alternate_modeled'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_g_benefits_alternate_modeled'
+    _title: 'csv import GHG benefits alternate modeled'
+  requirements:
+    _permission: 'access content'
+
+csv_import.alley_cropping:
+  path: '/csv_import/upload_alley_cropping'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_alley_cropping'
+    _title: 'csv import Alley Cropping'
+  requirements:
+    _permission: 'access content'
+
+csv_import.anaerobic_digester:
+  path: '/csv_import/upload_anaerobic_digester'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_anaerobic_digester'
+    _title: 'csv import Anaerobic Digester'
+  requirements:
+    _permission: 'access content'
+
+csv_import.combustion_system_improvement:
+  path: '/csv_import/upload_combustion_system_improvement'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_combustion_system_improvement'
+    _title: 'csv import Combustion System Improvement'
+  requirements:
+    _permission: 'access content'
+
+csv_import.conservation_cover:
+  path: '/csv_import/upload_conservation_cover'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_conservation_cover'
+    _title: 'csv import Conservation Cover'
+  requirements:
+    _permission: 'access content'
+
+csv_import.conservation_crop_rotation:
+  path: '/csv_import/upload_conservation_crop_rotation'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_conservation_crop_rotation'
+    _title: 'csv import Conservation Crop Rotation'
+  requirements:
+    _permission: 'access content'
+
+csv_import.contour_buffer_strips:
+  path: '/csv_import/upload_contour_buffer_strips'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_contour_buffer_strips'
+    _title: 'csv import Contour Buffer Strips'
+  requirements:
+    _permission: 'access content'
+
+csv_import.cover_crop:
+  path: '/csv_import/upload_cover_crop'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_cover_crop'
+    _title: 'csv import Cover Crop'
+  requirements:
+    _permission: 'access content'
+
+csv_import.critical_area_planting:
+  path: '/csv_import/upload_critical_area_planting'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_critical_area_planting'
+    _title: 'csv import Critical Area Planting'
+  requirements:
+    _permission: 'access content'
+
+csv_import.feed_management:
+  path: '/csv_import/upload_feed_management'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_feed_management'
+    _title: 'csv import Feed Management'
+  requirements:
+    _permission: 'access content'
+
+csv_import.field_border:
+  path: '/csv_import/upload_field_border'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_field_border'
+    _title: 'csv import Field Border'
+  requirements:
+    _permission: 'access content'
+
+csv_import.filter_strip:
+  path: '/csv_import/upload_filter_strip'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_filter_strip'
+    _title: 'csv import Filter Strip'
+  requirements:
+    _permission: 'access content'
+
+csv_import.forest_farming:
+  path: '/csv_import/upload_forest_farming'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_forest_farming'
+    _title: 'csv import Forest Farming'
+  requirements:
+    _permission: 'access content'
+
+csv_import.forest_stand_improvement:
+  path: '/csv_import/upload_forest_stand_improvement'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_forest_stand_improvement'
+    _title: 'csv import Forest Stand Improvement'
+  requirements:
+    _permission: 'access content'
+
+csv_import.grassed_waterway:
+  path: '/csv_import/upload_grassed_waterway'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_grassed_waterway'
+    _title: 'csv import Grassed Waterway'
+  requirements:
+    _permission: 'access content'
+
+csv_import.hedgerow_planting:
+  path: '/csv_import/upload_hedgerow_planting'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_hedgerow_planting'
+    _title: 'csv import Hedgerow Planting'
+  requirements:
+    _permission: 'access content'
+
+csv_import.herbaceous_wind_barriers:
+  path: '/csv_import/upload_herbaceous_wind_barriers'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_herbaceous_wind_barriers'
+    _title: 'csv import Herbaceous Wind Barriers'
+  requirements:
+    _permission: 'access content'
+
+csv_import.mulching:
+  path: '/csv_import/upload_mulching'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_mulching'
+    _title: 'csv import Mulching'
+  requirements:
+    _permission: 'access content'
+
+csv_import.nutrient_management:
+  path: '/csv_import/upload_nutrient_management'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_nutrient_management'
+    _title: 'csv import Nutrient Management'
+  requirements:
+    _permission: 'access content'
+
+csv_import.pasture_and_hay_planting:
+  path: '/csv_import/upload_pasture_and_hay_planting'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_pasture_and_hay_planting'
+    _title: 'csv import Pasture & Hay Planting'
+  requirements:
+    _permission: 'access content'
+
+csv_import.prescribed_grazing:
+  path: '/csv_import/upload_prescribed_grazing'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_prescribed_grazing'
+    _title: 'csv import Prescribed Grazing'
+  requirements:
+    _permission: 'access content'
+
+csv_import.range_planting:
+  path: '/csv_import/upload_range_planting'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_range_planting'
+    _title: 'csv import Range Planting'
+  requirements:
+    _permission: 'access content'
+
+csv_import.residue_and_tillage_management_notill:
+  path: '/csv_import/upload_residue_and_tillage_management_notill'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_residue_and_tillage_management_notill'
+    _title: 'csv import Residue and Tillage Management No Till'
+  requirements:
+    _permission: 'access content'
+
+csv_import.riparian_forest_buffer:
+  path: '/csv_import/upload_riparian_forest_buffer'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_riparian_forest_buffer'
+    _title: 'csv import Riparian Forest Buffer'
+  requirements:
+    _permission: 'access content'
+
+csv_import.riparian_herbaceous_cover:
+  path: '/csv_import/upload_riparian_herbaceous_cover'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_riparian_herbaceous_cover'
+    _title: 'csv import Riparian Herbaceous Cover'
+  requirements:
+    _permission: 'access content'
+
+csv_import.roofs_and_covers:
+  path: '/csv_import/upload_roofs_and_covers'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_roofs_and_covers'
+    _title: 'csv import Roofs and Covers'
+  requirements:
+    _permission: 'access content'
+
+csv_import.silvopasture:
+  path: '/csv_import/upload_silvopasture'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_silvopasture'
+    _title: 'csv import Silvopasture'
+  requirements:
+    _permission: 'access content'
+
+csv_import.stripcropping:
+  path: '/csv_import/upload_stripcropping'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_stripcropping'
+    _title: 'csv import Stripcropping'
+  requirements:
+    _permission: 'access content'
+
+csv_import.tree_shrub_establishment:
+  path: '/csv_import/upload_tree_shrub_establishment'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_tree_shrub_establishment'
+    _title: 'csv import Tree Shrub Establishment'
+  requirements:
+    _permission: 'access content'
+
+csv_import.vegetative_barrier:
+  path: '/csv_import/upload_vegetative_barrier'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_vegetative_barrier'
+    _title: 'csv import Vegetative Barrier'
+  requirements:
+    _permission: 'access content'
+
+csv_import.waste_separation_facility:
+  path: '/csv_import/upload_waste_separation_facility'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_waste_separation_facility'
+    _title: 'csv import Waste Separation Facility'
+  requirements:
+    _permission: 'access content'
+
+csv_import.waste_storage_facility:
+  path: '/csv_import/upload_waste_storage_facility'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_waste_storage_facility'
+    _title: 'csv import Waste Storage Facility'
+  requirements:
+    _permission: 'access content'
+
+csv_import.waste_treatment:
+  path: '/csv_import/upload_waste_treatment'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_waste_treatment'
+    _title: 'csv import Waste Treatment'
+  requirements:
+    _permission: 'access content'
+
+csv_import.waste_treatment_lagoon:
+  path: '/csv_import/upload_waste_treatment_lagoon'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_waste_treatment_lagoon'
+    _title: 'csv import Waste Treatment Lagoon'
+  requirements:
+    _permission: 'access content'
+
+csv_import.windshelter_est_reno:
+  path: '/csv_import/upload_windshelter_est_reno'
+  defaults:
+    _controller: '\Drupal\csv_import\Controller\CsvImportController::process_windshelter_est_reno'
+    _title: 'csv import Windbreak/Shelterbelt Establishment and Renovation'
+  requirements:
+    _permission: 'access content'
+
+csv_import.awardee_organization_info_form:
+  path: "/import/supplemental_workbook"
+  defaults:
+    _form: '\Drupal\csv_import\Form\WorkbookDateForm'
   requirements:
-    _permission: 'access content'
+    _permission: 'access content'
\ No newline at end of file
diff --color --color -rus ./web/modules/custom/csv_import/csv_import.services.yml ./web/modules/custom/csv_import_csc/csv_import.services.yml
--- ./web/modules/custom/csv_import/csv_import.services.yml	2023-11-03 08:50:25
+++ ./web/modules/custom/csv_import_csc/csv_import.services.yml	2023-11-03 08:50:25
@@ -0,0 +1 @@
+# intentionally left blank, ready to receive services code
\ No newline at end of file
diff --color --color -rus ./web/modules/custom/csv_import/src/Controller/CsvImportController.php ./web/modules/custom/csv_import_csc/src/Controller/CsvImportController.php
--- ./web/modules/custom/csv_import/src/Controller/CsvImportController.php	2023-11-03 08:50:25
+++ ./web/modules/custom/csv_import_csc/src/Controller/CsvImportController.php	2023-11-03 08:50:25
@@ -24,44 +24,415 @@
       '#children' => '
         import excel workbook (.xlsx, .xls):
         <form class="form-horizontal" action="/csv_import/upload_workbook" method="post"
-        name="frmExcelImport" id="frmExcelImport" enctype="multipart/form-data" onsubmit="return validateFile()">
+				name="frmExcelImport" id="frmExcelImport" enctype="multipart/form-data" onsubmit="return validateFile()">
           <input type="file" name="file" id="file" class="file" accept=".xls,.xlsx">
           <input type="submit" id="submit" name="import" class="btn-submit" />
         </form>
-
-        inputs:
-        <form action="/csv_import/upload_inputs" enctype="multipart/form-data" method="post">
+        project summary:
+        <form action="/csv_import/upload_project_summary" enctype="multipart/form-data" method="post">
           <input type="file" id="file" name="file">
           <input type="submit">
         </form>
-        
-        operations:
-        <form action="/csv_import/upload_operations" enctype="multipart/form-data" method="post">
+        market activities:
+        <form action="/csv_import/upload_market_activities" enctype="multipart/form-data" method="post">
           <input type="file" id="file" name="file">
           <input type="submit">
         </form>
-
-        soil health:
-        <form action="/csv_import/upload_soil_health_sample" enctype="multipart/form-data" method="post">
+        environmental benefits:
+        <form action="/csv_import/upload_environmental_benefits" enctype="multipart/form-data" method="post">
           <input type="file" id="file" name="file">
           <input type="submit">
         </form>
-
-        combo:
-        <form action="/csv_import/upload_combo" enctype="multipart/form-data" method="post">
+        farm summary:
+        <form action="/csv_import/upload_farm_summary" enctype="multipart/form-data" method="post">
           <input type="file" id="file" name="file">
           <input type="submit">
         </form>
-
-        soil test results:
-        <form action="/csv_import/upload_soil_test_results" enctype="multipart/form-data" method="post">
+        field enrollment:
+        <form action="/csv_import/upload_field_enrollment" enctype="multipart/form-data" method="post">
           <input type="file" id="file" name="file">
           <input type="submit">
         </form>
+        partner activities:
+        <form action="/csv_import/upload_partner_activities" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        producer enrollment:
+        <form action="/csv_import/upload_producer_enrollment" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        field summary:
+        <form action="/csv_import/upload_field_summary" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        ghg benefit - measured:
+        <form action="/csv_import/upload_ghg_benefits_measured" enctype="multipart/form-data" method="post">
+        <input type="file" id="file" name="file">
+        <input type="submit">
+        </form>
+        ghg benefits - alternate modeled:
+        <form action="/csv_import/upload_ghg_benefits_alternate_modeled" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - alley cropping:
+        <form action="/csv_import/upload_alley_cropping" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - anaerobic digester:
+        <form action="/csv_import/upload_anaerobic_digester" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - combustion system improvement:
+        <form action="/csv_import/upload_combustion_system_improvement" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - conservation cover:
+        <form action="/csv_import/upload_conservation_cover" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - conservation crop rotation:
+        <form action="/csv_import/upload_conservation_crop_rotation" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - contour buffer strips:
+        <form action="/csv_import/upload_contour_buffer_strips" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - cover crop:
+        <form action="/csv_import/upload_cover_crop" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - critical area planting:
+        <form action="/csv_import/upload_critical_area_planting" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - feed management:
+        <form action="/csv_import/upload_feed_management" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - field_border:
+        <form action="/csv_import/upload_field_border" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - filter strip:
+        <form action="/csv_import/upload_filter_strip" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - forest_farming:
+        <form action="/csv_import/upload_forest_farming" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - forest stand improvement:
+        <form action="/csv_import/upload_forest_stand_improvement" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - grassed waterway:
+        <form action="/csv_import/upload_grassed_waterway" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - hedgerow planting:
+        <form action="/csv_import/upload_hedgerow_planting" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - herbaceous wind barriers:
+        <form action="/csv_import/upload_herbaceous_wind_barriers" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - mulching:
+        <form action="/csv_import/upload_mulching" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - nutrient management:
+        <form action="/csv_import/upload_nutrient_management" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - pasture and hay planting:
+        <form action="/csv_import/upload_pasture_and_hay_planting" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - prescribed grazing:
+        <form action="/csv_import/upload_prescribed_grazing" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - range planting:
+        <form action="/csv_import/upload_range_planting" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - residue and tillage management no till:
+        <form action="/csv_import/upload_residue_and_tillage_management_notill" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - residue and tillage management reduced till:
+        <form action="/csv_import/upload_residue_and_tillage_management_redtill" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - riparian forest buffer:
+        <form action="/csv_import/upload_riparian_forest_buffer" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - riparian herbaceous cover:
+        <form action="/csv_import/upload_riparian_herbaceous_cover" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - roofs and covers:
+        <form action="/csv_import/upload_roofs_and_covers" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - silvopasture:
+        <form action="/csv_import/upload_silvopasture" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - stripcropping:
+        <form action="/csv_import/upload_stripcropping" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - tree shrub establishment:
+        <form action="/csv_import/upload_tree_shrub_establishment" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - vegetative barrier:
+        <form action="/csv_import/upload_vegetative_barrier" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - waste separation facility:
+        <form action="/csv_import/upload_waste_separation_facility" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - waste storage facility:
+        <form action="/csv_import/upload_waste_storage_facility" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - waste treatment:
+        <form action="/csv_import/upload_waste_treatment" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - waste treatment lagoon:
+        <form action="/csv_import/upload_waste_treatment_lagoon" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - windbreak/shelterbelt establishment and renovation:
+        <form action="/csv_import/upload_windshelter_est_reno" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - alley cropping:
+        <form action="/csv_import/upload_alley_cropping" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - anaerobic digester:
+        <form action="/csv_import/upload_anaerobic_digester" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - combustion system improvement:
+        <form action="/csv_import/upload_combustion_system_improvement" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - conservation cover:
+        <form action="/csv_import/upload_conservation_cover" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - conservation crop rotation:
+        <form action="/csv_import/upload_conservation_crop_rotation" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - contour buffer strips:
+        <form action="/csv_import/upload_contour_buffer_strips" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - cover crop:
+        <form action="/csv_import/upload_cover_crop" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - critical area planting:
+        <form action="/csv_import/upload_critical_area_planting" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - feed management:
+        <form action="/csv_import/upload_feed_management" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - field_border:
+        <form action="/csv_import/upload_field_border" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - filter strip:
+        <form action="/csv_import/upload_filter_strip" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - forest_farming:
+        <form action="/csv_import/upload_forest_farming" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - forest stand improvement:
+        <form action="/csv_import/upload_forest_stand_improvement" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - grassed waterway:
+        <form action="/csv_import/upload_grassed_waterway" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - hedgerow planting:
+        <form action="/csv_import/upload_hedgerow_planting" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - herbaceous wind barriers:
+        <form action="/csv_import/upload_herbaceous_wind_barriers" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - mulching:
+        <form action="/csv_import/upload_mulching" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - nutrient management:
+        <form action="/csv_import/upload_nutrient_management" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - pasture and hay planting:
+        <form action="/csv_import/upload_pasture_and_hay_planting" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - prescribed grazing:
+        <form action="/csv_import/upload_prescribed_grazing" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - range planting:
+        <form action="/csv_import/upload_range_planting" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - residue and tillage management no till:
+        <form action="/csv_import/upload_residue_and_tillage_management_notill" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - residue and tillage management reduced till:
+        <form action="/csv_import/upload_residue_and_tillage_management_redtill" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - riparian forest buffer:
+        <form action="/csv_import/upload_riparian_forest_buffer" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - riparian herbaceous cover:
+        <form action="/csv_import/upload_riparian_herbaceous_cover" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - roofs and covers:
+        <form action="/csv_import/upload_roofs_and_covers" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - silvopasture:
+        <form action="/csv_import/upload_silvopasture" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - stripcropping:
+        <form action="/csv_import/upload_stripcropping" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - tree shrub establishment:
+        <form action="/csv_import/upload_tree_shrub_establishment" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - vegetative barrier:
+        <form action="/csv_import/upload_vegetative_barrier" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - waste separation facility:
+        <form action="/csv_import/upload_waste_separation_facility" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - waste storage facility:
+        <form action="/csv_import/upload_waste_storage_facility" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - waste treatment:
+        <form action="/csv_import/upload_waste_treatment" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - waste treatment lagoon:
+        <form action="/csv_import/upload_waste_treatment_lagoon" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
+        supplemental log - windbreak/shelterbelt establishment and renovation:
+        <form action="/csv_import/upload_windshelter_est_reno" enctype="multipart/form-data" method="post">
+          <input type="file" id="file" name="file">
+          <input type="submit">
+        </form>
     ',
     ];
   }
 
+
   public function process_workbook() {
     $out = [];      //output messages: imported sheets;
     $output = '';     //output messages: skipped sheets;
@@ -85,13 +456,23 @@
           $extension = ucfirst(strtolower(pathinfo($targetPath, PATHINFO_EXTENSION)));
           
           //read the workbook but only get the sheets that is relevent
-          $sheetnames = ['Producer', 'Methods'];
+          $sheetnames = ['Coversheet', 'Project Summary', 'Partner Activities', 'Marketing Activities', 'Producer Enrollment', 'Field Enrollment', 
+                          'Farm Summary', 'Field Summary', 'GHG Benefits - Alt Models', 'GHG Benefits - Measured', 'Addl Envl Benefits',
+                          'Alley Cropping', 'Combustion System Improvement', 'Conservation Cover', 'Conservation Crop Rotation', 
+                          'Contour Buffer Strips', 'Cover Crop', 'Critical Area Planting', 'Feed Mgmt', 'Field Border', 'Filter Strip',
+                          'Forest Farming', 'Forest Stand Improvement', 'Grassed Waterway', 'Hedgerow Planting', 'Herbaceous Wind Barriers',
+                          'Mulching', 'Nutrient Mgmt', 'Pasture & Hay Planting', 'Prescribed Grazing', 'Range Planting',
+                          'Residue & Tillage Mgmt_NoTill', 'Residue & Tillage Mgmt_RedTill', 'Riparian Forest Buffer', 'Riparian Herbaceous Cover',
+                          'Roofs & Covers', 'Silvopasture', 'Stripcropping', 'Tree Shrub Establishment', 'Vegetative Barrier', 'Waste Separation Facility',
+                          'Waste Storage Facility', 'Waste Treatment', 'Waste Treatment Lagoon', 'WindShelter Est Reno', 'Anaerobic Digester'];
           $reader = IOFactory::createReader($extension);
           $reader->setReadDataOnly(TRUE);
           $reader->setLoadSheetsOnly($sheetnames);
           $spreadSheet = $reader->load($targetPath);
           $sheetCount = $spreadSheet->getSheetCount();
           
+          // Temp variable for project ID
+          $project_id_field = '';
 
           // Process each sheet in the workbook.
           for ($i = 0; $i < $sheetCount; $i++) {
@@ -107,26 +488,465 @@
 
             // Process the data in the sheet based on its name.
             switch ($sheet_name) {
-              //import producer
+              //import coversheet
               case $sheetnames[0]:
-                $end_column = 6;
-                $records = $this->processImport($sheet, 'import_producer', $end_column);
+                $dataArray = $this->processCoversheet($sheet, 'import_coversheet');
+                $project_id_field = strval($dataArray[1]);
 
+                break;
+                
+              //import project summary
+              case $sheetnames[1]:
+                $end_column = 35;
+                $records = $this->processImport($sheet, 'import_project_summary', $end_column);
+
                 //output message
-                $out[] = array('name' => 'Producer', 'records' => $records);
+                $out[] = array('name' =>'Project Summary', 'records' => $records);
                 
                 break;
 
-              //import Methods
-              case $sheetnames[1]:
+              //import partner activities
+              case $sheetnames[2]:
+                $end_column = 32;
+                $records = $this->processImport($sheet, 'import_partner_activities', $end_column);
+
+                //output message
+                $out[] = array('name' =>'Partner Activities', 'records' => $records);
+
+                break;
+              
+              //import market actitivies
+              case $sheetnames[3]:
+                $end_column = 31;
+                $records = $this->processImport($sheet, 'import_market_activities', $end_column);
+
+                //output message
+                $out[] = array('name' =>'Market Actitivies', 'records' => $records);
+                
+                break;
+
+              //import producer enrollment
+              case $sheetnames[4]:
+                $end_column = 31;
+                $records = $this->processImport($sheet, 'import_producer_enrollment', $end_column, '', $project_id_field);
+
+                //output message
+                $out[] = array('name' =>'Producer Enrollment', 'records' => $records);
+
+                break;
+
+              //import field enrollment
+              case $sheetnames[5]:
+                $end_column = 72;
+                $records = $this->processImport($sheet, 'import_field_enrollment', $end_column, '', $project_id_field);
+
+                //output message
+                $out[] = array('name' =>'Field Enrollment', 'records' => $records);
+
+                break;
+
+              //import farm summary
+              case $sheetnames[6]:
+                $end_column = 29;
+                $records = $this->processImport($sheet, 'import_farm_summary', $end_column);
+
+                //output message
+                $out[] = array('name' =>'Farm Summary', 'records' => $records);
+
+                break;
+
+              //import field summary
+              case $sheetnames[7]:
+                $end_column = 49;
+                $records = $this->processImport($sheet, 'import_field_summary', $end_column);
+
+                //output message
+                $out[] = array('name' =>'Field Summary', 'records' => $records);
+
+                break;
+
+              //import ghg benefits alt models
+              case $sheetnames[8]:
                 $end_column = 28;
-                $records = $this->processImport($sheet, 'import_methods', $end_column);
+                $records = $this->processImport($sheet, 'import_ghg_benefits_alt_models', $end_column);
 
                 //output message
-                $out[] = array('name' => 'Methods', 'records' => $records);
+                $out[] = array('name' =>'GHG Benefits Alt Models', 'records' => $records);
+  
+                break;     
 
+              //import ghg benefits measured
+              case $sheetnames[9]:
+                $end_column = 20;
+                $records = $this->processImport($sheet, 'import_ghg_benefits_measured', $end_column);
+
+                //output message
+                $out[] = array('name' =>'GHG_Benefits_Measured', 'records' => $records);
+  
+                break;   
+
+              //import addl envl benefits
+              case $sheetnames[10]:
+                $end_column = 57;
+                $records = $this->processImport($sheet, 'import_addl_envl_benefits', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Addl Envl Benefits', 'records' => $records);
+
+                break;   
+
+              //import alley cropping
+              case $sheetnames[11]:
+                $end_column = 8;
+                $records = $this->processImport($sheet, 'import_alley_cropping', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Alley Cropping', 'records' => $records);
+
                 break;
               
+              //import combustion system improvement
+              case $sheetnames[12]:
+                $end_column = 16;
+                $records = $this->processImport($sheet, 'import_combustion_system_improvement', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Combustion System Improvement', 'records' => $records);
+
+                break;
+
+              //import conservation cover
+              case $sheetnames[13]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_conservation_cover', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Conservation Cover', 'records' => $records);
+
+                break;
+              
+              //import conservation crop rotation
+              case $sheetnames[14]:
+                $end_column = 11;
+                $records = $this->processImport($sheet, 'import_conservation_crop_rotation', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Conservation Crop Rotation', 'records' => $records);
+
+                break;
+              
+              //import contour buffer strips
+              case $sheetnames[15]:
+                $end_column = 8;
+                $records = $this->processImport($sheet, 'import_contour_buffer_strips', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Contour Buffer Strips', 'records' => $records);
+
+                break;
+
+              //import cover crop
+              case $sheetnames[16]:
+                $end_column = 9;
+                $records = $this->processImport($sheet, 'import_cover_crop', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Cover Crop', 'records' => $records);
+
+                break;
+
+              //import critical area planting
+              case $sheetnames[17]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_critical_area_planting', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Critical Area Planting', 'records' => $records);
+
+                break;
+
+              //import feed management
+              case $sheetnames[18]:
+                $end_column = 10;
+                $records = $this->processImport($sheet, 'import_feed_management', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Feed Management', 'records' => $records);
+
+                break;
+
+              //import field border
+              case $sheetnames[19]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_field_border', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Field Border', 'records' => $records);
+
+                break;
+
+              //import filter strip
+              case $sheetnames[20]:
+                $end_column = 8;
+                $records = $this->processImport($sheet, 'import_filter_strip', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Filter Strip', 'records' => $records);
+
+                break;
+
+              //import forest farming
+              case $sheetnames[21]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_forest_farming', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Forest Farming', 'records' => $records);
+
+                break;
+
+              //import forest stand improvement
+              case $sheetnames[22]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_forest_stand_improvement', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Forest Stand Improvement', 'records' => $records);
+
+                break;
+
+              //import grassed waterway
+              case $sheetnames[23]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_grassed_waterway', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Grassed Waterway', 'records' => $records);
+
+                break;
+
+              //import hedgerow planting
+              case $sheetnames[24]:
+                $end_column = 8;
+                $records = $this->processImport($sheet, 'import_hedgerow_planting', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Hedgerow Planting', 'records' => $records);
+
+                break;
+
+              //import herbaceous wind barriers
+              case $sheetnames[25]:
+                $end_column = 9;
+                $records = $this->processImport($sheet, 'import_herbaceous_wind_barriers', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Herbaceous Wind Barriers', 'records' => $records);
+
+                break;
+
+              //import mulching
+              case $sheetnames[26]:
+                $end_column = 8;
+                $records = $this->processImport($sheet, 'import_mulching', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Mulching', 'records' => $records);
+
+                break;
+
+              //import nutrient management
+              case $sheetnames[27]:
+                $end_column = 14;
+                $records = $this->processImport($sheet, 'import_nutrient_management', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Nutrient Management', 'records' => $records);
+
+                break;
+
+              //import pasture and hay planting
+              case $sheetnames[28]:
+                $end_column = 9;
+                $records = $this->processImport($sheet, 'import_pasture_and_hay_planting', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Pasture and Hay Planting', 'records' => $records);
+
+                break;
+
+              //import Perscribed Grazing
+              case $sheetnames[29]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_prescribed_grazing', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Prescribed Grazing', 'records' => $records);
+
+                break;
+
+              //import Range Planting
+              case $sheetnames[30]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_range_planting', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Range Planting', 'records' => $records);
+
+                break;
+
+              //import Residue and Tillage Management - No-till
+              case $sheetnames[31]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_residue_and_tillage_management_notill', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Residue & Tillage Management - No-till', 'records' => $records);
+
+                break;
+
+              //import Residue and Tillage Management - Reduced-till
+              case $sheetnames[32]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_residue_and_tillage_management_redtill', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Residue & Tillage Management - Reduced-till', 'records' => $records);
+
+                break;
+
+              //import Riparian Forest Buffer
+              case $sheetnames[33]:
+                $end_column = 8;
+                $records = $this->processImport($sheet, 'import_riparian_forest_buffer', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Riparian Forest Buffer', 'records' => $records);
+
+                break;
+
+              //import Riparian Herbaceous Cover
+              case $sheetnames[34]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_riparian_herbaceous_cover', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Riparian Herbaceous Cover', 'records' => $records);
+
+                break;
+
+              //import Roofs & Covers
+              case $sheetnames[35]:
+                $end_column = 8;
+                $records = $this->processImport($sheet, 'import_roofs_and_covers', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Roofs & Covers', 'records' => $records);
+
+                break;
+
+              //import Silvopasture
+              case $sheetnames[36]:
+                $end_column = 8;
+                $records = $this->processImport($sheet, 'import_silvopasture', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Silvopasture', 'records' => $records);
+
+                break;
+
+              //import Stripcropping
+              case $sheetnames[37]:
+                $end_column = 9;
+                $records = $this->processImport($sheet, 'import_stripcropping', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Stripcropping', 'records' => $records);
+
+                break;
+
+              //import Tree Shrub Establishment
+              case $sheetnames[38]:
+                $end_column = 8;
+                $records = $this->processImport($sheet, 'import_tree_shrub_establishment', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Tree Shrub Establishment', 'records' => $records);
+
+                break;
+
+
+              //import Vegetative Barrier
+              case $sheetnames[39]:
+                $end_column = 8;
+                $records = $this->processImport($sheet, 'import_vegetative_barrier', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Vegetative Barrier', 'records' => $records);
+
+                break;
+
+              //import Waste Separation Facility
+              case $sheetnames[40]:
+                $end_column = 9;
+                $records = $this->processImport($sheet, 'import_waste_separation_facility', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Waste Separation Facility', 'records' => $records);
+
+                break;
+
+              //import Waste Storage Facility
+              case $sheetnames[41]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_waste_storage_facility', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Waste Storage Facility', 'records' => $records);
+
+                break;
+
+              //import Waste Treatment
+              case $sheetnames[42]:
+                $end_column = 7;
+                $records = $this->processImport($sheet, 'import_waste_treatment', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Waste Treatment', 'records' => $records);
+
+                break;
+
+              //import Waste Treatment Lagoon
+              case $sheetnames[43]:
+                $end_column = 9;
+                $records = $this->processImport($sheet, 'import_waste_treatment_lagoon', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Waste Treatment Lagoon', 'records' => $records);
+
+                break;
+
+              //import Windbreak/Shelterbelt Establishment and Renovation
+              case $sheetnames[44]:
+                $end_column = 9;
+                $records = $this->processImport($sheet, 'import_windshelter_est_reno', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Windbreak/Shelterbelt Establishment and Renovation', 'records' => $records);
+
+                break;
+
+                //import Anaerobic Digester
+              case $sheetnames[45]:
+                $end_column = 11;
+                $records = $this->processImport($sheet, 'import_anaerobic_digester', $end_column);
+  
+                //output message
+                $out[] = array('name' =>'Import Anaerobic Digester', 'records' => $records);
+
+                break;
+
+
               default:
                 // Unknown sheet name.
                 $output .= "<p>Skipping unknown sheet \"$sheet_name\".</p>";
@@ -155,76 +975,219 @@
 
   }
 
-  public function processImport($in_sheet, $importFunction, $end_column){
-    $record_count = 0;
-                
-    $start_column = 3;
+  public function process_market_activities() {
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
 
-    $row = 5;
-
-    // Starting from first column and row of data, retrieve each cell of the rows of data. 
-    for($row; ; $row++){
-      $dataArray = [];
-      for($col = $start_column; $col != $end_column + 1; ++$col) {
-        $curr_cell = $in_sheet->getCell(Coordinate::stringFromColumnIndex($col) . $row);
-        $cell_value = $curr_cell->getValue();
-        if ($cell_value[0] === '=') {
-          $cell_value = $curr_cell->getOldCalculatedValue();
-        }
-        array_push($dataArray, $cell_value);
+    foreach($csv as $csv_line) {
+      $market_activities_submission = [];
+      $market_activities_submission['csc_type'] = 'csc_market_activities';
+      $market_activities_submission['csc_name'] = $csv_line[0];
+      $market_activities_submission['csc_m_activities_commodity_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'commodity_term', 'name' => $csv_line[1]]));
+      $market_activities_submission['csc_m_act_mktng_chnl_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'marketing_channel_type', 'name' => $csv_line[2]]));
+      $market_activities_submission['csc_m_act_mktng_chnl_type_otr'] = $csv_line[3];
+      $market_activities_submission['csc_m_act_number_of_buyers'] = $csv_line[4];
+      $market_activities_submission['csc_m_activities_buyer_names'] = array_map('trim', explode('|', $csv_line[5]));
+      $market_activities_submission['csc_m_act_mktng_chnl_geography'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'marketing_channel_geography', 'name' => $csv_line[6]]));
+      $market_activities_submission['csc_m_activities_value_sold'] = $csv_line[7];
+      $market_activities_submission['csc_m_activities_volume_sold'] = $csv_line[8];
+      $market_activities_submission['csc_m_act_volume_sold_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'volume_sold_unit', 'name' => $csv_line[9]]));
+      $market_activities_submission['csc_m_act_volume_unit_otr'] = $csv_line[10];
+      $market_activities_submission['csc_m_activities_price_premium'] = $csv_line[11];
+      $market_activities_submission['csc_m_act_price_premium_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'price_premium_unit', 'name' => $csv_line[12]]));
+      $market_activities_submission['csc_m_act_price_premium_unit_otr'] = $csv_line[13];
+      $market_activities_submission['csc_m_act_price_premium_to_prod'] = $csv_line[14];
+      $product_differentiation_method_array = array_map('trim', explode('|', $csv_line[15]));
+      $product_differentiation_method_results = [];
+      foreach ($product_differentiation_method_array as $value) {
+        $product_differentiation_method_results = array_merge($product_differentiation_method_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'product_differentiation_method', 'name' => $value]));
       }
-
-      //if the row is empty then we reach the end of rows and stop importing
-      if(empty(array_filter($dataArray, function ($a) { return $a !== null;}))) {
-        break;
+      $market_activities_submission['csc_m_act_product_diff_mthd'] = $product_differentiation_method_results;
+      $market_activities_submission['csc_m_act_product_diff_mthd_otr'] = $csv_line[16];
+      $marketing_method_array = array_map('trim', explode('|', $csv_line[17]));
+      $marketing_method_results = [];
+      foreach ($marketing_method_array as $value) {
+        $marketing_method_results = array_merge($marketing_method_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'marketing_method', 'name' => $value]));
       }
+      $market_activities_submission['csc_m_act_mktng_mthd'] = $marketing_method_results;
+      $market_activities_submission['csc_m_act_mktng_mthd_otr'] = $csv_line[18];
+      $marketing_channel_identification_array = array_map('trim', explode('|', $csv_line[19]));
+      $marketing_channel_identification_results = [];
+      foreach ($marketing_channel_identification_array as $value) {
+        $marketing_channel_identification_results = array_merge($marketing_channel_identification_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'marketing_channel_identification', 'name' => $value]));
+      }
+      $market_activities_submission['csc_m_act_mktng_chnl_id'] = $marketing_channel_identification_results;
+      $market_activities_submission['csc_m_act_mktng_chnl_id_mthd_otr'] = $csv_line[20];
+      $traceability_method_array = array_map('trim', explode('|', $csv_line[21]));
+      $traceability_method_results = [];
+      foreach ($traceability_method_array as $value) {
+        $traceability_method_results = array_merge($traceability_method_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'traceability_method', 'name' => $value]));
+      }
+      $market_activities_submission['csc_m_act_traceability_mthd'] = $traceability_method_results;
+      $market_activities_submission['csc_m_act_traceability_mthd_otr'] = $csv_line[22];
       
-      //increment record count
-      $record_count = $record_count + 1;
+      $ps_to_save = Log::create($market_activities_submission);
 
-      //import new project summary record
-      $importFunction($dataArray, $record_count);
-      
+      $ps_to_save->save();
+
+      $out = $out + 1;
     }
 
-    return $record_count;
+    return [
+      "#children" => "added " . $out . " market activities.",
+    ];
     
   }
 
-  public function process_combo_operations($csv) {
+  public function process_environmental_benefits() {
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+
     foreach($csv as $csv_line) {
-      if($csv_line[0] === "Operation") {
-        $shmu = \Drupal::entityTypeManager()->getStorage('asset')->load($csv_line[2]);
-        $project = \Drupal::entityTypeManager()->getStorage('asset')->load($shmu->get('project')->target_id);
+      $environmental_benefits_submission = [];
+      $environmental_benefits_submission['type'] = 'environmental_benefits';
+      $environmental_benefits_submission['name'] = $csv_line[0];
+      $environmental_benefits_submission['fiscal_year'] = $csv_line[1];
+      $environmental_benefits_submission['fiscal_quarter'] = $csv_line[2];
+      $environmental_benefits_submission['field_id'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'name' => $csv_line[3]]));
+      $environmental_benefits_submission['environmental_benefits'] = $csv_line[4];
+      $environmental_benefits_submission['nitrogen_loss'] = $csv_line[5];
+      $environmental_benefits_submission['nitrogen_loss_amount'] = $csv_line[6];
+      $environmental_benefits_submission['nitrogen_loss_amount_unit'] = $csv_line[7];
+      $environmental_benefits_submission['nitrogen_loss_amount_unit_other'] = $csv_line[8];
+      $environmental_benefits_submission['nitrogen_loss_purpose'] = $csv_line[9];
+      $environmental_benefits_submission['nitrogen_loss_purpose_other'] = $csv_line[10];
+      $environmental_benefits_submission['phosphorus_loss'] = $csv_line[11];
+      $environmental_benefits_submission['phosphorus_loss_amount'] = $csv_line[12];
+      $environmental_benefits_submission['phosphorus_loss_amount_unit'] = $csv_line[13];
+      $environmental_benefits_submission['phosphorus_loss_amount_unit_other'] = $csv_line[14];
+      $environmental_benefits_submission['phosphorus_loss_purpose'] = $csv_line[15];
+      $environmental_benefits_submission['phosphorus_loss_purpose_other'] = $csv_line[16];
+      $environmental_benefits_submission['other_water_quality'] = $csv_line[17];
+      $environmental_benefits_submission['other_water_quality_type'] = $csv_line[18];
+      $environmental_benefits_submission['other_water_quality_type_other'] = $csv_line[19];
+      $environmental_benefits_submission['other_water_quality_amount'] = $csv_line[20];
+      $environmental_benefits_submission['other_water_quality_amount_unit'] = $csv_line[21];
+      $environmental_benefits_submission['other_water_quality_amount_unit_other'] = $csv_line[22];
+      $environmental_benefits_submission['other_water_quality_purpose'] = $csv_line[23];
+      $environmental_benefits_submission['other_water_quality_purpose_other'] = $csv_line[24];
+      $environmental_benefits_submission['water_quality'] = $csv_line[25];
+      $environmental_benefits_submission['water_quality_amount'] = $csv_line[26];
+      $environmental_benefits_submission['water_quality_amount_unit'] = $csv_line[27];
+      $environmental_benefits_submission['water_quality_amount_unit_other'] = $csv_line[28];
+      $environmental_benefits_submission['water_quality_purpose'] = $csv_line[29];
+      $environmental_benefits_submission['water_quality_purpose_other'] = $csv_line[30];
+      $environmental_benefits_submission['reduced_erosion'] = $csv_line[31];
+      $environmental_benefits_submission['reduced_erosion_amount'] = $csv_line[32];
+      $environmental_benefits_submission['reduced_erosion_amount_unit'] = $csv_line[33];
+      $environmental_benefits_submission['reduced_erosion_amount_unit_other'] = $csv_line[34];
+      $environmental_benefits_submission['reduced_erosion_purpose'] = $csv_line[35];
+      $environmental_benefits_submission['reduced_erosion_purpose_other'] = $csv_line[36];
+      $environmental_benefits_submission['reduced_energy_use'] = $csv_line[37];
+      $environmental_benefits_submission['reduced_energy_use_amount'] = $csv_line[38];
+      $environmental_benefits_submission['reduced_energy_use_amount_unit'] = $csv_line[39];
+      $environmental_benefits_submission['reduced_energy_use_amount_unit_other'] = $csv_line[40];
+      $environmental_benefits_submission['reduced_energy_use_purpose'] = $csv_line[41];
+      $environmental_benefits_submission['reduced_energy_use_purpose_other'] = $csv_line[42];
+      $environmental_benefits_submission['avoided_land_conversion'] = $csv_line[43];
+      $environmental_benefits_submission['avoided_land_conversion_amount'] = $csv_line[44];
+      $environmental_benefits_submission['avoided_land_conversion_unit'] = $csv_line[45];
+      $environmental_benefits_submission['avoided_land_conversion_unit_other'] = $csv_line[46];
+      $environmental_benefits_submission['avoided_land_conversion_purpose'] = $csv_line[47];
+      $environmental_benefits_submission['avoided_land_conversion_purpose_other'] = $csv_line[48];
+      $environmental_benefits_submission['improved_wildlife_habitat'] = $csv_line[49];
+      $environmental_benefits_submission['improved_wildlife_habitat_amount'] = $csv_line[50];
+      $environmental_benefits_submission['improved_wildlife_habitat_unit'] = $csv_line[51];
+      $environmental_benefits_submission['improved_wildlife_habitat_amount_unit_other'] = $csv_line[52];
+      $environmental_benefits_submission['improved_wildlife_habitat_purpose'] = $csv_line[53];
+      $environmental_benefits_submission['improved_wildlife_habitat_purpose_other'] = $csv_line[54];
+      
+      $ps_to_save = Log::create($environmental_benefits_submission);
 
-        // $field_input = \Drupal::entityTypeManager()->getStorage('asset')->load($csv_line[2]);
+      $ps_to_save->save();
 
-        // $operation_submission = [];
-        // $operation_submission['type'] = 'operation';
+      $out = $out + 1;
+    }
 
-        // $operation_submission['shmu'] = $shmu;
-        // $operation_submission['field_operation_date'] = strtotime($csv_line[1]);
-        // $operation_submission['field_operation'] = $csv_line[3];
-        // $operation_submission['field_ownership_status'] = $csv_line[4];
-        // $operation_submission['field_tractor_self_propelled_machine'] = $csv_line[5];
-        // $operation_submission['field_row_number'] = $csv_line[6];
-        // $operation_submission['field_width'] = $csv_line[7];
-        // $operation_submission['field_horsepower'] = $csv_line[8];
-        // $operation_submission['project'] = $project;
+    return [
+      "#children" => "added " . $out . " Additional Environmental Benefits.",
+    ];
+    
+  }
 
-        // $operation_to_save = Asset::create($operation_submission);
-        
-        // $operation_to_save->save();
+  public function process_farm_summary() {
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+
+    foreach($csv as $csv_line) {
+      $farm_summary_submission = [];
+      $farm_summary_submission['type'] = 'farm_summary';
+      $farm_summary_submission['name'] = $csv_line[0];
+      $farm_summary_submission['farm_summary_fiscal_year'] = $csv_line[1];
+      $farm_summary_submission['farm_summary_fiscal_quarter'] = $csv_line[2];
+      $farm_summary_submission['farm_summary_state'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'state', 'name' => $csv_line[3]]));
+      $farm_summary_submission['farm_summary_county'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'county', 'name' => $csv_line[4]]));
+      $producer_ta_received_array = array_map('trim', explode('|', $csv_line[5]));
+      $producer_ta_received_results = [];
+      foreach ($producer_ta_received_array as $value) {
+        $producer_ta_received_results = array_merge($producer_ta_received_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'producer_ta_received', 'name' => $value]));
       }
+      $farm_summary_submission['farm_summary_producer_ta_received'] = $producer_ta_received_results;
+      $farm_summary_submission['farm_summary_producer_ta_received_other'] = $csv_line[6];
+      $farm_summary_submission['farm_summary_producer_incentive_amount'] = $csv_line[7];
+      $incentive_reason_array = array_map('trim', explode('|', $csv_line[8]));
+      $incentive_reason_results = [];
+      foreach ($incentive_reason_array as $value) {
+        $incentive_reason_results = array_merge($incentive_reason_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'incentive_reason', 'name' => $value]));
+      }
+      $farm_summary_submission['farm_summary_incentive_reason'] = $incentive_reason_results;
+      $farm_summary_submission['farm_summary_incentive_reason_other'] = $csv_line[9];
+      $incentive_structure_array = array_map('trim', explode('|', $csv_line[10]));
+      $incentive_structure_results = [];
+      foreach ($incentive_structure_array as $value) {
+        $incentive_structure_results = array_merge($incentive_structure_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'incentive_structure', 'name' => $value]));
+      }
+      $farm_summary_submission['farm_summary_incentive_structure'] = $incentive_structure_results;
+      $farm_summary_submission['farm_summary_incentive_structure_other'] = $csv_line[11];
+      $incentive_type_array = array_map('trim', explode('|', $csv_line[12]));
+      $incentive_type_results = [];
+      foreach ($incentive_type_array as $value) {
+        $incentive_type_results = array_merge($incentive_type_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'incentive_type', 'name' => $value]));
+      }
+      $farm_summary_submission['farm_summary_incentive_type'] = $incentive_type_results;
+      $farm_summary_submission['farm_summary_incentive_type_other'] = $csv_line[13];
+      $farm_summary_submission['farm_summary_payment_on_enrollment'] = $csv_line[14];
+      $farm_summary_submission['farm_summary_payment_on_implementation'] = $csv_line[15];
+      $farm_summary_submission['farm_summary_payment_on_harvest'] = $csv_line[16];
+      $farm_summary_submission['farm_summary_payment_on_mmrv'] = $csv_line[17];
+      $farm_summary_submission['farm_summary_payment_on_sale'] = $csv_line[18];
+      
+      $ps_to_save = Log::create($farm_summary_submission);
+
+      $ps_to_save->save();
+
+      $out = $out + 1;
     }
 
     return [
-      "#children" => "saved " . nl2br(print_r($shmu, true)) . " operations.",
+      "#children" => "added " . $out . " Farm Summary.",
     ];
     
   }
 
-  public function process_inputs() {
+  public function process_field_enrollment() {
     $file = \Drupal::request()->files->get("file");
     $fName = $file->getClientOriginalName();
     $fLoc = $file->getRealPath();
@@ -233,51 +1196,208 @@
     $out = 0;
 
     foreach($csv as $csv_line) {
+      $field_enrollment_submission = [];
+      $field_enrollment_submission['type'] = 'csc_field_enrollment';
+      $field_enrollment_submission['name'] = $csv_line[0];
+      $field_enrollment_submission['csc_f_enrollment_tract_id'] = $csv_line[1];
+      $field_enrollment_submission['csc_f_enrollment_field_id'] = $csv_line[2];
+      $field_enrollment_submission['csc_f_enrollment_state'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'state', 'name' => $csv_line[3]]));
+      $field_enrollment_submission['csc_f_enrollment_prior_field_id'] = $csv_line[4];
+      $field_enrollment_submission['csc_f_enrollment_start_date'] = \DateTime::createFromFormat("D, m/d/Y - G:i", $csv_line[5])->getTimestamp();
+      $field_enrollment_submission['csc_f_nrlmnt_total_field_area'] = $csv_line[6];
+      $field_enrollment_submission['csc_f_nrlmnt_commodity_category'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'commodity_category', 'name' => $csv_line[7]]));
+      $field_enrollment_submission['csc_f_enrollment_baseline_yield'] = $csv_line[8];
+      $field_enrollment_submission['csc_f_nrlmnt_base_yield_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'baseline_yield_unit', 'name' => $csv_line[9]]));
+      $field_enrollment_submission['csc_f_nrlmnt_base_yield_unit_otr'] = $csv_line[10];
+      $field_enrollment_submission['csc_f_nrlmnt_base_yield_loc'] = $csv_line[11];
+      $field_enrollment_submission['csc_f_nrlmnt_base_yield_loc_otr'] = $csv_line[12];
+      $field_enrollment_submission['csc_f_enrollment_field_land_use'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_land_use', 'name' => $csv_line[13]]));
+      $field_enrollment_submission['csc_f_nrlmnt_field_irrigated'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_irrigated', 'name' => $csv_line[14]]));
+      $field_enrollment_submission['csc_f_enrollment_field_tillage'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_tillage', 'name' => $csv_line[15]]));
+      $field_enrollment_submission['csc_f_nrlmnt_prac_pri_util_prcnt'] = $csv_line[16];
+      $field_enrollment_submission['csc_f_nrlmnt_field_any_csaf_prac'] = $csv_line[17];
+      $field_enrollment_submission['csc_f_nrlmnt_field_prac_pri_util'] = $csv_line[18];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_type_1'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $csv_line[19]]));
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_1'] = $csv_line[20];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_1'] = $csv_line[21];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_year_1'] = $csv_line[22];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_1'] = $csv_line[23];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_1'] = $csv_line[24];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_1'] = $csv_line[25];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_type_2'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $csv_line[26]]));
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_2'] = $csv_line[27];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_2'] = $csv_line[28];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_year_2'] = $csv_line[29];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_2'] = $csv_line[30];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_2'] = $csv_line[31];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_2'] = $csv_line[32];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_type_3'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $csv_line[33]]));
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_3'] = $csv_line[34];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_3'] = $csv_line[35];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_year_3'] = $csv_line[36];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_3'] = $csv_line[37];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_3'] = $csv_line[38];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_3'] = $csv_line[39];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_type_4'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $csv_line[40]]));
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_4'] = $csv_line[41];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_4'] = $csv_line[42];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_year_4'] = $csv_line[43];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_4'] = $csv_line[44];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_4'] = $csv_line[45];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_4'] = $csv_line[46];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_type_5'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $csv_line[47]]));
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_5'] = $csv_line[48];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_5'] = $csv_line[49];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_year_5'] = $csv_line[50];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_5'] = $csv_line[51];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_5'] = $csv_line[52];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_5'] = $csv_line[53];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_type_6'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $csv_line[54]]));
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_6'] = $csv_line[55];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_6'] = $csv_line[56];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_year_6'] = $csv_line[57];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_6'] = $csv_line[58];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_6'] = $csv_line[59];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_6'] = $csv_line[60];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_type_7'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $csv_line[61]]));
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_7'] = $csv_line[62];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_7'] = $csv_line[63];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_year_7'] = $csv_line[64];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_7'] = $csv_line[65];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_7'] = $csv_line[66];
+      $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_7'] = $csv_line[67];
+      
+      $ps_to_save = Asset::create($field_enrollment_submission);
 
-      $operation = \Drupal::entityTypeManager()->getStorage('asset')->load($csv_line[0]);
-      $project = \Drupal::entityTypeManager()->getStorage('asset')->load($operation->get('project')->target_id);
+      $ps_to_save->save();
 
-      $input_submission = [];
-      $input_submission['type'] = 'input';
-      $input_submission['field_input_date'] = strtotime($csv_line[1]);
-      $input_submission['field_input_category'] = $csv_line[2];
-      $input_submission['field_input'] = $csv_line[3];
-      $input_submission['field_unit'] = $csv_line[4];
-      $input_submission['field_rate_units'] = $csv_line[5];
-      $input_submission['field_cost_per_unit'] = $csv_line[6];
-      $input_submission['field_custom_application_unit'] = $csv_line[7];
-      $input_submission['project'] = $project;
+      $out = $out + 1;
+    }
 
-      $operation_taxonomy_name = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($operation->get('field_operation')->target_id);
-      $input_taxonomy_name = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($csv_line[2]);
-      $input_submission['name'] = $operation_taxonomy_name->getName() . "_" . $input_taxonomy_name->getName() . "_" . $csv_line[1];
+    return [
+      "#children" => "added " . $out . " field enrollment.",
+    ];
+    
+  }
 
+  public function process_partner_activities() {
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+
+    foreach($csv as $csv_line) {
+      $partner_activities_submission = [];
+      $partner_activities_submission['type'] = 'csc_partner_activities';
+      $partner_activities_submission['name'] = $csv_line[0];
+      $partner_activities_submission['csc_prtnr_act_partner_ein'] = $csv_line[1];
+      $partner_activities_submission['csc_prtnr_act_partner_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'partner_type', 'name' => $csv_line[2]]));
+      $partner_activities_submission['csc_prtnr_act_partner_poc'] = $csv_line[3];
+      $partner_activities_submission['csc_prtnr_act_partner_poc_email'] = $csv_line[4];
+      $partner_activities_submission['csc_prtnr_act_partnership_start'] = \DateTime::createFromFormat("D, m/d/Y - G:i", $csv_line[5])->getTimestamp();
+      $partner_activities_submission['csc_prtnr_act_partnership_end'] = \DateTime::createFromFormat("D, m/d/Y - G:i", $csv_line[6])->getTimestamp();
+      $partner_activities_submission['csc_prtnr_act_partnership_init'] = filter_var($csv_line[7], FILTER_VALIDATE_BOOLEAN);
+      $partner_activities_submission['csc_prtnr_act_partner_total_req'] = $csv_line[8];
+      $partner_activities_submission['csc_prtnr_act_total_match_contrib'] = $csv_line[9];
+      $partner_activities_submission['csc_prtnr_act_total_match_incent'] = $csv_line[10];
+      $partner_activities_submission['csc_prtnr_act_match_type_1'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'match_type', 'name' => $csv_line[11]]));
+      $partner_activities_submission['csc_prtnr_act_match_amount_1'] = $csv_line[12];
+      $partner_activities_submission['csc_prtnr_act_match_type_2'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'match_type', 'name' => $csv_line[13]]));
+      $partner_activities_submission['csc_prtnr_act_match_amount_2'] = $csv_line[14];
+      $partner_activities_submission['csc_prtnr_act_match_type_3'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'match_type', 'name' => $csv_line[15]]));
+      $partner_activities_submission['csc_prtnr_act_match_amount_3'] = $csv_line[16];
+      $partner_activities_submission['csc_prtnr_act_match_type_other'] = $csv_line[17];
+      $training_provided_array = array_map('trim', explode('|', $csv_line[18]));
+      $training_provided_results = [];
+      foreach ($training_provided_array as $value) {
+        $training_provided_results = array_merge($training_provided_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'training_provided', 'name' => $value]));
+      }
+      $partner_activities_submission['csc_prtnr_act_training_provided'] = $training_provided_results;
+      $partner_activities_submission['csc_prtnr_act_training_other'] = $csv_line[19];
+      $partner_activities_submission['csc_partner_activity_activity1'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'activity_by_partner', 'name' => $csv_line[20]]));
+      $partner_activities_submission['csc_prtnr_act_activity1_cost'] = $csv_line[21];
+      $partner_activities_submission['csc_partner_activity_activity2'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'activity_by_partner', 'name' => $csv_line[22]]));
+      $partner_activities_submission['csc_prtnr_act_activity2_cost'] = $csv_line[23];
+      $partner_activities_submission['csc_partner_activity_activity3'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'activity_by_partner', 'name' => $csv_line[24]]));
+      $partner_activities_submission['csc_prtnr_act_activity3_cost'] = $csv_line[25];
+      $partner_activities_submission['csc_prtnr_act_activity_other'] = $csv_line[26];
+      $partner_activities_submission['csc_prtnr_act_products_supplied'] = $csv_line[27];
+      $partner_activities_submission['csc_prtnr_act_product_source'] = $csv_line[28];
       
-      $input_to_save = Asset::create($input_submission);
+      $ps_to_save = Asset::create($partner_activities_submission);
 
-      $cost_submission = [];
-      $cost_submission ['type'] = 'cost_sequence';
-      $cost_submission ['field_cost_type'] = $csv_line[8];
-      $cost_submission ['field_cost'] = $csv_line[9];
+      $ps_to_save->save();
 
-      $other_cost = Asset::create($cost_submission);
+      $out = $out + 1;
+    }
 
-      $input_to_save->set('field_input_cost_sequences', $other_cost);
-      $input_to_save->save();
+    return [
+      "#children" => "added " . $out . " partner activities.",
+    ];
+    
+  }
+
+  public function process_producer_enrollment() {
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+
+    foreach($csv as $csv_line) {
+      $producer_enrollment_submission = [];
+      $producer_enrollment_submission['type'] = 'csc_producer_enrollment';
+      $producer_enrollment_submission['name'] = $csv_line[0];
+      $producer_enrollment_submission['csc_project_id'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_project_summary', 'name' => $csv_line[1]]));
+      $producer_enrollment_submission['csc_p_enrollment_farm_id'] = $csv_line[2];
+      $producer_enrollment_submission['csc_p_enrollment_state'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'state', 'name' => $csv_line[3]]));
+      $producer_enrollment_submission['csc_p_enrollment_county'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'county', 'name' => $csv_line[4]]));
+      $producer_enrollment_submission['csc_p_enrollment_start_date'] = \DateTime::createFromFormat("D, m/d/Y - G:i", $csv_line[5])->getTimestamp();
+      $producer_enrollment_submission['csc_p_enrlmnt_underserved_status'] = $csv_line[6];
+      $producer_enrollment_submission['csc_p_enrollment_total_area'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'total_area', 'name' => $csv_line[7]]));
+      $producer_enrollment_submission['csc_p_enrlmnt_total_crop_area'] = $csv_line[8];
+      $producer_enrollment_submission['csc_p_enrlmnt_total_livstk_area'] = $csv_line[9];
+      $producer_enrollment_submission['csc_p_enrlmnt_total_forest_area'] = $csv_line[10];
+      $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_1'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'livestock_type', 'name' => $csv_line[11]]));
+      $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_1_cnt'] = $csv_line[12];
+      $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_2'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'livestock_type', 'name' => $csv_line[13]]));
+      $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_2_cnt'] = $csv_line[14];
+      $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_3'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'livestock_type', 'name' => $csv_line[15]]));
+      $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_3_cnt'] = $csv_line[16];
+      $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_otr'] = $csv_line[17];
+      $producer_enrollment_submission['csc_p_enrollment_organic_farm'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'organic_farm', 'name' => $csv_line[18]]));
+      $producer_enrollment_submission['csc_p_enrollment_organic_fields'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'organic_fields', 'name' => $csv_line[19]]));
+      $producer_enrollment_submission['csc_p_enrlmnt_prod_motivation'] = $csv_line[20];
+      $producer_outreach_array = array_map('trim', explode('|', $csv_line[21]));
+      $producer_outreach_results = [];
+      foreach ($producer_outreach_array as $value) {
+        $producer_outreach_results = array_merge($producer_outreach_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'producer_outreach', 'name' => $value]));
+      }
+      $producer_enrollment_submission['csc_p_enrlmnt_prod_outreach'] = $producer_outreach_results;
+      $producer_enrollment_submission['csc_p_enrlmnt_prod_outreach_otr'] = $csv_line[22];
+      $producer_enrollment_submission['csc_p_enrlmnt_csaf_experience'] =array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'csaf_experience', 'name' => $csv_line[23]]));
+      $producer_enrollment_submission['csc_p_enrlmnt_csaf_federal_fds'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'csaf_federal_funds', 'name' => $csv_line[24]]));
+      $producer_enrollment_submission['csc_p_enrlmnt_csaf_st_local_fds'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'csaf_state_or_local_funds', 'name' => $csv_line[25]]));
+      $producer_enrollment_submission['csc_p_enrlmnt_csaf_nonprofit_fds'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'csaf_nonprofit_funds', 'name' => $csv_line[26]]));
+      $producer_enrollment_submission['csc_p_enrlmnt_csaf_market_incent'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'csaf_market_incentives', 'name' => $csv_line[27]]));
       
-      $operation->get('field_input')[] = $input_to_save->id();
-      $operation->save();
+      $ps_to_save = Asset::create($producer_enrollment_submission);
 
-      $out = $out + 1;// . nl2br(print_r($csv_line, true)) . "\n";
+      $ps_to_save->save();
+
+      $out = $out + 1;
     }
 
     return [
-      "#children" => "added " . $out . " inputs.",
+      "#children" => "added " . $out . " producer enrollment.",
     ];
     
   }
 
-  public function process_operations() {
+  public function process_project_summary() {
     $file = \Drupal::request()->files->get("file");
     $fName = $file->getClientOriginalName();
     $fLoc = $file->getRealPath();
@@ -286,370 +1406,1494 @@
     $out = 0;
 
     foreach($csv as $csv_line) {
+      $project_summary_submission = [];
+      $project_summary_submission['type'] = 'project_summary';
+      $project_summary_submission['name'] = $csv_line[0];
+      $project_summary_submission['csc_p_summary_commodity_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'commodity_category', 'name' => $csv_line[5]]));
+      $project_summary_submission['csc_p_summ_ghg_calculation_mthds'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_calculation_methods', 'name' => $csv_line[6]]));
+      $project_summary_submission['csc_p_summ_ghg_cum_calculation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_cumulative_calculation', 'name' => $csv_line[7]]));
+      $project_summary_submission['csc_p_summary_ghg_benefits'] = $csv_line[8]; //strtotime($csv_line[1]);
+      $project_summary_submission['csc_p_summ_cum_carbon_stack'] = $csv_line[9];
+      $project_summary_submission['csc_p_summ_cum_co2_benefit'] = $csv_line[10];
+      $project_summary_submission['csc_p_summ_cum_ch4_benefit'] = $csv_line[11];
+      $project_summary_submission['csc_p_summ_cum_n2o_benefit'] = $csv_line[12];
+      $project_summary_submission['csc_p_summary_offsets_produced'] = $csv_line[13];
+      $project_summary_submission['csc_p_summary_offsets_sale'] = $csv_line[14];
+      $project_summary_submission['csc_p_summary_offsets_price'] = $csv_line[15];
+      $project_summary_submission['csc_p_summary_insets_produced'] = $csv_line[16];
+      $project_summary_submission['csc_p_summary_cost_on_farm'] = $csv_line[17];
+      $project_summary_submission['csc_p_summary_mmrv_cost'] = $csv_line[18];
+      $project_summary_submission['csc_p_summ_ghg_monitoring_mthd'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_monitoring_method', 'name' => $csv_line[19]]));
+      $project_summary_submission['csc_p_summ_ghg_reporting_mthd'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_reporting_method', 'name' => $csv_line[20]]));
+      $project_summary_submission['csc_p_summ_ghg_verification_mthd'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_verification_method', 'name' => $csv_line[21]]));
+      
+      $ps_to_save = Asset::create($project_summary_submission);
 
-      $shmu = \Drupal::entityTypeManager()->getStorage('asset')->load($csv_line[0]);
-      $project = \Drupal::entityTypeManager()->getStorage('asset')->load($shmu->get('project')->target_id);
+      $ps_to_save->save();
 
-      $field_input = \Drupal::entityTypeManager()->getStorage('asset')->load($csv_line[2]);
+      $out = $out + 1;
+    }
 
-      $operation_submission = [];
-      $operation_submission['type'] = 'operation';
+    return [
+      "#children" => "added " . $out . " project summary.",
+    ];
+    
+  }
 
-      $operation_submission['shmu'] = $shmu;
-      $operation_submission['field_operation_date'] = strtotime($csv_line[1]);
-      $operation_submission['field_input'] = $field_input;
-      $operation_submission['field_operation'] = $csv_line[3];
-      $operation_submission['field_ownership_status'] = $csv_line[4];
-      $operation_submission['field_tractor_self_propelled_machine'] = $csv_line[5];
-      $operation_submission['field_row_number'] = $csv_line[6];
-      $operation_submission['field_width'] = $csv_line[7];
-      $operation_submission['field_horsepower'] = $csv_line[8];
-      $operation_submission['project'] = $project;
+  public function process_ghg_benefits_measured() {
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
 
-      $operation_to_save = Asset::create($operation_submission);
+    foreach($csv as $csv_line) {
+      $ghg_benefits_measured_submission = [];
+      $ghg_benefits_measured_submission['type'] = 'ghg_benefits_measured';
+      $ghg_benefits_measured_submission['name'] = $csv_line[0];
+      $ghg_benefits_measured_submission['g_benefits_measured_field_id'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'name' => $csv_line[1]]));
+      $ghg_benefits_measured_submission['g_benefits_measured_fiscal_quarter'] = $csv_line[2];
+      $ghg_benefits_measured_submission['g_benefits_measured_fiscal_year'] = $csv_line[3];
+      $ghg_benefits_measured_submission['g_benefits_measured_ghg_measurement_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_measurement_method', 'name' => $csv_line[4]]));
+      $ghg_benefits_measured_submission['g_benefits_measured_ghg_measurement_method_other'] = $csv_line[5];
+      $ghg_benefits_measured_submission['g_benefits_measured_lab_name'] = $csv_line[6];
+      $ghg_benefits_measured_submission['g_benefits_measured_measurement_start_date'] = \DateTime::createFromFormat("Y-m-d", $csv_line[7])->getTimestamp();
+      $ghg_benefits_measured_submission['g_benefits_measured_measurement_end_date'] = \DateTime::createFromFormat("Y-m-d", $csv_line[8])->getTimestamp();
+      $ghg_benefits_measured_submission['g_benefits_measured_total_co2_reduction'] = $csv_line[9];
+      $ghg_benefits_measured_submission['g_benefits_measured_total_field_carbon_stock'] = $csv_line[10];
+      $ghg_benefits_measured_submission['g_benefits_measured_total_ch4_reduction'] = $csv_line[11];
+      $ghg_benefits_measured_submission['g_benefits_measured_total_n2o_reduction'] = $csv_line[12];
+      $ghg_benefits_measured_submission['g_benefits_measured_soil_sample_result'] = $csv_line[13];
+      $ghg_benefits_measured_submission['g_benefits_measured_soil_sample_result_unit'] = $csv_line[14];
+      $ghg_benefits_measured_submission['g_benefits_measured_soil_sample_result_unit_other'] = $csv_line[15];
+      $ghg_benefits_measured_submission['g_benefits_measured_measurement_type'] = $csv_line[16];
+      $ghg_benefits_measured_submission['g_benefits_measured_measurement_type_other'] = $csv_line[17];
       
-      $operation_to_save->save();
+      $ps_to_save = Log::create($ghg_benefits_measured_submission);
+
+      $ps_to_save->save();
+
       $out = $out + 1;
     }
+
     return [
-      "#children" => "saved " . $out . " operations.",
+      "#children" => "added " . $out . " ghg benefit measured.",
     ];
     
   }
-
-  public function process_soil_health_sample() {
+  
+  public function process_field_summary() {
     $file = \Drupal::request()->files->get("file");
     $fName = $file->getClientOriginalName();
     $fLoc = $file->getRealPath();
     $csv = array_map('str_getcsv', file($fLoc));
+
     array_shift($csv);
+
     $out = 0;
 
-    foreach($csv as $csv_line) { 
+    foreach($csv as $csv_line) {
 
-      $shmu = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'soil_health_management_unit', 'name' => $csv_line[1]]));
-      $project = \Drupal::entityTypeManager()->getStorage('asset')->load($shmu->get('project')->target_id);
+      $field_summary_submission = [];
+      $field_summary_submission['type'] = 'field_summary';
+      $field_summary_submission['name'] = $csv_line[0];
+      $field_summary_submission['status'] = $csv_line[38];
+      $field_summary_submission['flag'] = $csv_line[36];
+      $field_summary_submission['notes'] = $csv_line[37];
+      $field_summary_submission['f_summary_contract_end_date'] = \DateTime::createFromFormat("D, m/d/Y - G:i", $csv_line[1])->getTimestamp();
+      $field_summary_submission['f_summary_implementation_cost_coverage'] = $csv_line[2];
+      $field_summary_submission['f_summary_implementation_cost'] = $csv_line[3];
+      $field_summary_submission['f_summary_implementation_cost_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'cost_unit', 'name' => $csv_line[4]]));
+      $field_summary_submission['f_summary_date_practice_complete'] = \DateTime::createFromFormat("D, m/d/Y - G:i", $csv_line[5])->getTimestamp();
+      $field_summary_submission['f_summary_fiscal_quarter'] = $csv_line[6];
+      $field_summary_submission['f_summary_fiscal_year'] = $csv_line[7];
+      $field_summary_submission['f_summary_field_commodity_value'] = $csv_line[8];
+      $field_summary_submission['f_summary_field_commodity_volume'] = $csv_line[9];
+      $field_summary_submission['f_summary_field_commodity_volume_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_commodity_volume_unit', 'name' => $csv_line[10]]));
+      $field_summary_submission['f_summary_field_ghg_calculation'] = $csv_line[11];
 
-      $soil_health_sample_submission = [];
-      $soil_health_sample_submission['type'] = 'soil_health_sample';
-      $soil_health_sample_submission['soil_id'] = $csv_line[0];
-      $soil_health_sample_submission['shmu'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'soil_health_management_unit', 'name' => $csv_line[1]]));
-      $soil_health_sample_submission['field_soil_sample_collection_dat'] = \DateTime::createFromFormat("D, m/d/Y - G:i", $csv_line[2])->getTimestamp();
-      $soil_health_sample_submission['field_equipment_used'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_equipment', 'name' => $csv_line[3]]));
-      $soil_health_sample_submission['field_diameter'] = $csv_line[4];
-      $soil_health_sample_submission['name'] = $csv_line[5];
-      $soil_health_sample_submission['field_plant_stage_at_sampling'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_plant_stage', 'name' => $csv_line[6]]));
-      $soil_health_sample_submission['field_sampling_depth'] = $csv_line[7];
-      $soil_health_sample_submission['field_soil_sample_geofield'] = $csv_line[8];
-      $soil_health_sample_submission['project'] = $project;
+      $summary_field_ghg_monitoring_array = array_map('trim', explode('|', $csv_line[12]));
+      $summary_field_ghg_monitoring_results = [];
+
+      foreach ($summary_field_ghg_monitoring_array as $value) {
+        $summary_field_ghg_monitoring_results = array_merge($summary_field_ghg_monitoring_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_ghg_monitoring', 'name' => $value]));
+      }
+
+      $field_summary_submission['f_summary_field_ghg_monitoring'] = $summary_field_ghg_monitoring_results;
+      $summary_field_ghg_reporting_array = array_map('trim', explode('|', $csv_line[13]));
+      $summary_field_ghg_reporting_results = [];
+
+      foreach ($summary_field_ghg_reporting_array as $value) {
+        $summary_field_ghg_reporting_results = array_merge($summary_field_ghg_reporting_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_ghg_reporting', 'name' => $value]));
+      }
+
+      $field_summary_submission['f_summary_field_ghg_reporting'] = $summary_field_ghg_reporting_results;
+      $summary_field_ghg_verification_array = array_map('trim', explode('|', $csv_line[14]));
+      $summary_field_ghg_verification_results = [];
+
+      foreach ($summary_field_ghg_verification_array as $value) {
+        $summary_field_ghg_verification_results = array_merge($summary_field_ghg_verification_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_ghg_verification', 'name' => $value]));
+      }
+
+      $field_summary_submission['f_summary_field_ghg_verification'] = $summary_field_ghg_verification_results;
+      $field_summary_submission['f_summary_field_insets'] = $csv_line[15];
+      $field_summary_submission['f_summary_field_carbon_stock'] = $csv_line[16];
+      $field_summary_submission['f_summary_field_ch4_emission_reduction'] = $csv_line[17];
+      $field_summary_submission['f_summary_field_co2_emission_reduction'] = $csv_line[18];
+      $field_summary_submission['f_summary_field_ghg_emission_reduction'] = $csv_line[19];
+      $field_summary_submission['f_summary_field_official_ghg_calculations'] = $csv_line[20];
+      $field_summary_submission['f_summary_field_n2o_emission_reduction'] = $csv_line[21];
+      $field_summary_submission['f_summary_field_offsets'] = $csv_line[22];
+      $field_summary_submission['f_summary_commodity_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'commodity_term', 'name' => $csv_line[23]]));
+      $field_summary_submission['f_summary_incentive_per_acre_or_head'] = $csv_line[24];
+      $field_summary_submission['f_summary_marketing_assistance_provided'] = $csv_line[25];
+      $field_summary_submission['f_summary_mmrv_assistance_provided'] = $csv_line[26];
+      $field_summary_submission['f_summary_implementation_cost_unit_other'] = $csv_line[27];
+      $field_summary_submission['f_summary_field_commodity_volume_unit_other'] = $csv_line[28];
+      $field_summary_submission['f_summary_field_ghg_monitoring_other'] = $csv_line[29];
+      $field_summary_submission['f_summary_field_ghg_reporting_other'] = $csv_line[30];
+      $field_summary_submission['f_summary_field_ghg_verification_other'] = $csv_line[31];
+      $field_summary_submission['f_summary_field_measurement_other'] = $csv_line[32];
+
+      $summary_practice_type_array = array_map('trim', explode('|', $csv_line[33]));
+      $summary_practice_type_results = [];
+
+      foreach ($summary_practice_type_array as $value) {
+        $summary_practice_type_results = array_merge($summary_practice_type_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $value]));
+      }
+
+      $field_summary_submission['f_summary_practice_type'] = $summary_practice_type_results;
+      $field_summary_submission['f_summary_field_id'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'name' => $csv_line[34]]));
       
-      $soil_health_sample_to_save = Asset::create($soil_health_sample_submission);
-      
-      $soil_health_sample_to_save->save();
+      $ps_to_save = Log::create($field_summary_submission);
+
+      $ps_to_save->save();
+
       $out = $out + 1;
+    }
 
+    return [
+      "#children" => "added " . $out . " field summary.",
+    ];
+
+  }  
+  
+  public function process_g_benefits_alternate_modeled() {
+
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+
+    foreach($csv as $csv_line) {
+      $g_benefits_alternate_modeledsubmission = [];
+      $g_benefits_alternate_modeledsubmission['name'] = $csv_line[0];
+      $g_benefits_alternate_modeledsubmission['type'] = 'ghg_benefits_alternate_modeled';
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_fiscal_year'] = $csv_line[1];
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_fiscal_quarter'] = $csv_line[2];
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_field_id'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'name' => $csv_line[4]]));
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_commodity_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'commodity_term', 'name' => $csv_line[5]]));
+
+      $g_benefits_alternate_modeled_practice_type_array = array_map('trim', explode('|', $csv_line[6]));
+      $g_benefits_alternate_modeled_practice_type_results = [];
+      foreach ($g_benefits_alternate_modeled_practice_type_array as $value) {
+        $g_benefits_alternate_modeled_practice_type_results = array_merge($g_benefits_alternate_modeled_practice_type_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $value]));
+      }
+
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_practice_type'] = $g_benefits_alternate_modeled_practice_type_results;
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_ghg_model'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_model', 'name' => $csv_line[7]]));
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_ghg_model_other'] = $csv_line[8];
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_model_start_date'] = \DateTime::createFromFormat("D, m/d/Y - G:i", $csv_line[9])->getTimestamp();
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_model_end_date'] = \DateTime::createFromFormat("D, m/d/Y - G:i", $csv_line[10])->getTimestamp();
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_ghg_benefits_estimated'] = $csv_line[11];
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_carbon_stock_estimated'] = $csv_line[12];
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_co2_estimated'] = $csv_line[13];
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_ch4_estimated'] = $csv_line[14];
+      $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_n2o_estimated'] = $csv_line[15];
+
+      $gbam_to_save = log::create($g_benefits_alternate_modeledsubmission);
+
+      $gbam_to_save->save();
+
+      $out = $out + 1;      
     }
+
     return [
-      "#children" => "saved " . $out . " soil health sample.",
+      "#children" => "added " . $out . " GHG benefits alternate modeled.",
     ];
+
   }
 
-  public function process_combo() {
-    // grab the contents of the file and same some info
+  public function process_alley_cropping(){
     $file = \Drupal::request()->files->get("file");
-    $file_name = $file->getClientOriginalName();
-    $item_count = 0;
-    $file_loc = $file->getRealPath();
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
     
-    $csv = array_map('str_getcsv', file($file_loc));
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line_raw);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_alley_cropping';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p311_species_category'] = $csv_line[6];
+      $supplemental_data_submission['csc_p311_species_density'] = $csv_line[7];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+
+    }
+
+    return [
+      "#children" => "added " . $out . " Alley Cropping.",
+    ];
+  }
+
+  public function process_anaerobic_digester(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
     array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
 
-    // holds items being added by reference number
-    $operation_ref_nums = [];
-    $input_ref_nums = [];
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_anaerobic_digester';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p366_prior_waste_storage_sys'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'waste_storage_system', 'name' => $in_data_array[6]]));
+      $supplemental_data_submission['csc_p366_digester_type'] = $in_data_array[7];
+      $supplemental_data_submission['csc_p366_digester_type_other'] = $in_data_array[8];
+      $supplemental_data_submission['csc_p366_addtl_feedback_source'] = $in_data_array[9];
+      $supplemental_data_submission['csc_p366_addtl_fdbk_source_otr'] = $in_data_array[10];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Anaerobic Digester",
+    ];
+  }
+
+
+  public function process_combustion_system_improvement(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
     
-    // break sheet down into sections
-    $current_type = "";
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
 
-    foreach($csv as $csv_line) {
-      if ($csv_line[0] != "") { // header row
-        $current_type = $csv_line[0];
-      } else { // object
-        $items[$current_type][] = $csv_line;
-      }
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_combustion_sys_improvement';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p372_prior_fuel_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'fuel_type', 'name' => $csv_line[6]]));
+      $supplemental_data_submission['csc_p372_prior_fuel_type_other'] = $csv_line[7];
+      $supplemental_data_submission['csc_p372_prior_fuel_amount'] = $csv_line[8];
+      $supplemental_data_submission['csc_p372_prior_fuel_amount_unit'] = $csv_line[9];
+      $supplemental_data_submission['csc_p372_pri_fuel_amnt_unit_otr'] = $csv_line[10];
+      $supplemental_data_submission['csc_p372_fuel_type_after'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'fuel_type', 'name' => $csv_line[11]]));
+      $supplemental_data_submission['csc_p372_fuel_type_after_other'] = $csv_line[12];
+      $supplemental_data_submission['csc_p372_fuel_amount_after'] = $csv_line[13];
+      $supplemental_data_submission['csc_p372_fuel_amount_unit_after'] = $csv_line[14];
+      $supplemental_data_submission['csc_p372_fuel_amnt_unit_aft_otr'] = $csv_line[15];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
     }
 
-    // process each section in turn
-    foreach($items["Operation"] as $csv_line) {
-        $shmu = \Drupal::entityTypeManager()->getStorage('asset')->load($csv_line[2]);
-        $project = \Drupal::entityTypeManager()->getStorage('asset')->load($shmu->get('project')->target_id);
-      
-        $operation_submission = [];
-        $operation_submission['type'] = 'operation';
-  
-        $operation_submission['shmu'] = $shmu;
-        $operation_submission['field_operation_date'] = strtotime($csv_line[3]);
-        $operation_submission['field_operation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_operation_type', 'name' => $csv_line[9]]));
-        $operation_submission['field_ownership_status'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_equipment_ownership', 'name' => $csv_line[4]]));
-        $operation_submission['field_tractor_self_propelled_machine'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_tractor_self_propelled_machine', 'name' => $csv_line[5]]));;
-        $operation_submission['field_row_number'] = $csv_line[6];
-        $operation_submission['field_width'] = $csv_line[7];
-        $operation_submission['field_horsepower'] = $csv_line[8];
-        $operation_submission['project'] = $project;
-        $operation_to_save = Asset::create($operation_submission);
-        $operation_to_save->save();
+    return [
+      "#children" => "added " . $out . " Combustion System Improvement.",
+    ];
+  }
 
-        $operation_ref_nums[$csv_line[1]] = $operation_to_save;
+  public function process_conservation_cover(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
 
-        $item_count++;
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
 
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_conservation_cover';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p327_species_category'] = $csv_line[6];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
     }
 
-    foreach($items["Input"] as $csv_line) {
-      $operation = $operation_ref_nums[$csv_line[2]];
-      $project = $operation->id;
+    return [
+      "#children" => "added " . $out . " Conservation Cover.",
+    ];
+  }
 
-      $input_submission = [];
-      $input_submission['type'] = 'input';
-      $input_submission['field_input_date'] = strtotime($csv_line[3]);
-      $input_submission['field_input_category'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_input', 'name' => $csv_line[4]]));
-      $input_submission['field_input'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_input', 'name' => $csv_line[5]]));
-      $input_submission['field_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_unit', 'name' => $csv_line[6]]));
-      $input_submission['field_rate_units'] = $csv_line[7];
-      $input_submission['field_cost_per_unit'] = $csv_line[8];
-      $input_submission['field_custom_application_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_unit', 'name' => $csv_line[9]]));;
+  public function process_conservation_crop_rotation(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
 
-      $operation_taxonomy_name = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($operation->get('field_operation')->target_id);
-      $input_taxonomy_name = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_input', 'name' => $csv_line[5]]));
-      
-      $input_submission['name'] = $operation_taxonomy_name->getName() . "_" . $input_taxonomy_name->getName() . "_" . $csv_line[3];
-      $input_submission['project'] = $project;
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
 
-      $input_to_save = Asset::create($input_submission);
-      $input_to_save->save();
-        
-      $operation->get('field_input')[] = $input_to_save->id();
-      $operation->save();
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_conservation_crop_rotation';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p328_conservation_crop_type'] = $csv_line[6];
+      $supplemental_data_submission['csc_p328_change_implemented'] = $csv_line[7];
+      $supplemental_data_submission['csc_p328_rotation_tillage_type'] = $csv_line[8];
+      $supplemental_data_submission['csc_p328_rotation_till_type_otr'] = $csv_line[9];
+      $supplemental_data_submission['csc_p328_total_rotation_length'] = $csv_line[10];
 
-      $input_ref_nums[$csv_line[1]] = $input_to_save;
+      $ps_to_save = Log::create($supplemental_data_submission);
 
-      $item_count++;
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
 
+    return [
+      "#children" => "added " . $out . " Conservation Crop Rotation.",
+    ];
+  }
+
+  public function process_contour_buffer_strips(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_contour_buffer_strips';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p332_strip_width'] = $csv_line[6];
+      $supplemental_data_submission['csc_p332_species_category'] = $csv_line[7];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
     }
 
-    foreach($items["OpCosts"] as $csv_line) {
-     $operation = $operation_ref_nums[$csv_line[1]];
+    return [
+      "#children" => "added " . $out . " Contour Buffer Strips.",
+    ];
+  }
 
-      $cost_submission = [];
-      $cost_submission ['type'] = 'cost_sequence';
-      $cost_submission ['field_cost_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_operation_type', 'name' => $csv_line[2]]));;
-      $cost_submission ['field_cost'] = $csv_line[3];
+  public function process_cover_crop(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
 
-      $other_cost = Asset::create($cost_submission);
-      $other_cost->save();
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
 
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_cover_crop';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p340_species_category'] = $csv_line[6];
+      $supplemental_data_submission['csc_p340_planned_management'] = $csv_line[7];
+      $supplemental_data_submission['csc_p340_termination_method'] = $csv_line[8];
 
-      $new_cost_id = $other_cost->id();
-      $old_cost_sequence_target_ids = $operation->get('field_operation_cost_sequences');
-      //dpm($cost_sequence_target_ids);
-      $cost_sequence_target_ids = [];
-      foreach ($old_cost_sequence_target_ids as $val) {
-        $cost_sequence_target_ids[] = $val->target_id;
-      }
+      $ps_to_save = Log::create($supplemental_data_submission);
 
-      // add new cost_id to existing sequence and save it back
-      $cost_sequence_target_ids[] = $new_cost_id;
-      $operation->set('field_operation_cost_sequences', $cost_sequence_target_ids);
-      $operation->save();
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
 
-      $item_count++;
+    return [
+      "#children" => "added " . $out . " Cover Crop.",
+    ];
+  }
+
+  public function process_critical_area_planting(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_critical_area_planting';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p342_species_category'] = $csv_line[6];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
     }
+
+    return [
+      "#children" => "added " . $out . " Critical Area Planting.",
+    ];
+  }
+
+  public function process_feed_management(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
     
-    foreach($items["InputCosts"] as $csv_line) {
-      $input = $input_ref_nums[$csv_line[1]];
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
 
-      $cost_submission = [];
-      $cost_submission ['type'] = 'cost_sequence';
-      $cost_submission ['field_cost_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_operation_type', 'name' => $csv_line[2]]));
-      $cost_submission ['field_cost'] = $csv_line[3];
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
 
-      $other_cost = Asset::create($cost_submission);
-      $other_cost->save();
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_feed_management';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p592_crude_protein_percent'] = $csv_line[6];
+      $supplemental_data_submission['csc_p592_fat_percent'] = $csv_line[7];
+      $supplemental_data_submission['csc_p592_feed_additives'] = $csv_line[8];
+      $supplemental_data_submission['csc_p592_feed_additives_other'] = $csv_line[9];
 
-      $new_cost_id = $other_cost->id();
+      $ps_to_save = Log::create($supplemental_data_submission);
 
-      $old_cost_sequence_target_ids = $input->get('field_input_cost_sequences');
-      
-      $cost_sequence_target_ids = [];
-      foreach ($old_cost_sequence_target_ids as $val) {
-        $cost_sequence_target_ids[] = $val->target_id;
-      }
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
 
-      // add new cost_id to existing sequence and save it back. is this efficient? no.
-      $cost_sequence_target_ids[] = $new_cost_id;
-      $input->set('field_input_cost_sequences', $cost_sequence_target_ids);
-      $input->save();
+    return [
+      "#children" => "added " . $out . " Feed Management.",
+    ];
+  }
 
-      $item_count++;
+  public function process_field_border(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_field_border';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p386_species_category'] = $csv_line[6];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
     }
 
-    $out_str = "";
+    return [
+      "#children" => "added " . $out . " Field Border.",
+    ];
+  }
 
-    $out_str .= "Processed " . "<b>" . $item_count . "</b>" . " items from " . "<b>" . $file_name . "</b>"  . ".";
-    $out_str .= "<br /><br />";
+  public function process_filter_strip(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
     
-    $out_str .= "<b>" . count($items["Operation"]) . "</b>" . " Operations.<br />";
-    // foreach($operation_ref_nums as $op) {
-    //   dpm($op);
-    //   $out_str .= "<a href=\"/edit/operation/" . $op->id->target_id ."\">" . "id" . $op->id->target_id  . "</a>";
-    // }
-    // $out_str .= "<br />";
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
 
-    $out_str .= "<b>" . count($items["Input"]) . "</b>" . " Inputs.<br />";
-    $out_str .= "<b>" . count($items["InputCosts"]) . "</b>" . " Input costs.<br />";
-    $out_str .= "<b>" . count($items["OpCosts"]) . "</b>" . " Operation costs.<br />";
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
 
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_filter_strip';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p393_strip_width'] = $csv_line[6];
+      $supplemental_data_submission['csc_p393_species_category'] = $csv_line[7];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
     return [
-      "#children" => $out_str,
+      "#children" => "added " . $out . " Filter Strip.",
     ];
+  }
+
+  public function process_forest_farming(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
     
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_forest_farming';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p379_land_use_prev_years'] = $csv_line[6];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Forest Farming.",
+    ];
   }
-  
-  public function process_operations_with_other_costs() {
 
+  public function process_forest_stand_improvement(){
     $file = \Drupal::request()->files->get("file");
     $fName = $file->getClientOriginalName();
     $fLoc = $file->getRealPath();
     $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
 
-    $oc_index =  array_search("other_costs",$csv[0]);
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
 
-    $csv_oc = $csv[1][$oc_index];
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_forest_stand_improvement';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p666_implementation_purpose'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => '666_implementation_purpose', 'name' => $csv_line[6]]));;
 
-    $result = str_replace( '"', '', $csv_oc);
+      $ps_to_save = Log::create($supplemental_data_submission);
 
-    $exps = explode("|",$result);
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
 
-    $csid = [];
+    return [
+      "#children" => "added " . $out . " Forest Stand Improvemet.",
+    ];
+  }
 
-    foreach( $exps as $exp){
-      
-      $cval = explode(",",$exp);
-      $cost = $cval[0];
-      $cost_type = $cval[1];
-      
-      //create cost sequence
-      $cost_sequence = [];
-      $cost_sequence['type'] = 'cost_sequence';
-      $cost_sequence['field_cost_type'] = ['target_id' => $cost_type];
-      $cost_sequence['field_cost'] = $cost;
-      $cost_sequenceN = Asset::create($cost_sequence);
+  public function process_grassed_waterway(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
 
-      $cost_sequenceN->save();
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
 
-      $nid = $cost_sequenceN->id();
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_grassed_waterway';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p412_species_category'] = $csv_line[6];
 
-      $csid[] = $nid;
+      $ps_to_save = Log::create($supplemental_data_submission);
 
+      $ps_to_save->save();
+      $out = $out + 1;      
     }
 
-    $shmu = \Drupal::entityTypeManager()->getStorage('asset')->load($csv[1][0]);
-    $project = \Drupal::entityTypeManager()->getStorage('asset')->load($shmu->get('project')->target_id);
+    return [
+      "#children" => "added " . $out . " Grassed Waterway.",
+    ];
+  }
 
-    $field_input = \Drupal::entityTypeManager()->getStorage('asset')->load($csv[1][2]);
+  public function process_hedgerow_planting(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
 
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
 
-    $operation_submission = [];
-    $operation_submission['type'] = 'operation';
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_hedgerow_planting';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p422_species_category'] = $csv_line[6];
+      $supplemental_data_submission['csc_p422_species_density'] = $csv_line[7];
 
-    $operation_submission['shmu'] = $shmu;
-    $operation_submission['field_operation_date'] = strtotime($csv[1][1]);
-    //$operation_submission['field_input'] = $field_input;
-    $operation_submission['field_operation'] = $csv[1][3];
-    $operation_submission['field_ownership_status'] = $csv[1][4];
-    $operation_submission['field_tractor_self_propelled_machine'] = $csv[1][5];
-    $operation_submission['field_row_number'] = $csv[1][6];
-    $operation_submission['field_width'] = $csv[1][7];
-    $operation_submission['field_horsepower'] = $csv[1][8];
-    $operation_submission['project'] = $project;
-    $operation_submission['field_operation_cost_sequences'] = $csid;
-    $operation_to_save = Asset::create($operation_submission);
+      $ps_to_save = Log::create($supplemental_data_submission);
 
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
 
-    $operation_to_save->save();
+    return [
+      "#children" => "added " . $out . " Hedgerow Planting.",
+    ];
+  }
 
+  public function process_herbaceous_wind_barriers(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_herbaceous_wind_barriers';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p603_species_category'] = $csv_line[6];
+      $supplemental_data_submission['csc_p603_barrier_width'] = $csv_line[7];
+      $supplemental_data_submission['csc_p603_number_of_rows'] = $csv_line[8];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
     return [
-      "#children" => nl2br(print_r("saved", true)),
+      "#children" => "added " . $out . " Herbaceous Wind Barriers.",
     ];
   }
-  public function process_soil_test_results() {
+
+  public function process_mulching(){
     $file = \Drupal::request()->files->get("file");
     $fName = $file->getClientOriginalName();
     $fLoc = $file->getRealPath();
     $csv = array_map('str_getcsv', file($fLoc));
     array_shift($csv);
     $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_mulching';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p484_mulch_type'] = $csv_line[6];
+      $supplemental_data_submission['csc_p484_mulch_coverage'] = $csv_line[7];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Mulching.",
+    ];
+  }
+
+  public function process_nutrient_management(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_nutrient_management';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p590_nutrient_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['csc_vid' => 'nutrient_type', 'name' => $csv_line[6]]));
+      $supplemental_data_submission['csc_p590_application_method'] = $csv_line[7];
+      $supplemental_data_submission['csc_p590_pri_aplctn_method'] = $csv_line[8];
+      $supplemental_data_submission['csc_p590_pri_aplctn_timing'] = $csv_line[9];
+      $supplemental_data_submission['csc_p590_prior_application_timing'] = $csv_line[10];
+      $supplemental_data_submission['csc_p590_application_rate'] = $csv_line[11];
+      $supplemental_data_submission['csc_p590_application_rate_unit'] = $csv_line[12];
+      $supplemental_data_submission['csc_p590_aplctn_rate_change'] = $csv_line[13];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Nutrient Management.",
+    ];
+  }
+
+  public function process_pasture_and_hay_planting(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_pasture_hay_planting';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p512_species_category'] = $csv_line[6];
+      $supplemental_data_submission['csc_p512_termination_process'] = $csv_line[7];
+      $supplemental_data_submission['csc_p512_otr_term_process'] = $csv_line[8];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Pasture & Hay Planting.",
+    ];
+  }
+
+  public function process_prescribed_grazing(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_prescribed_grazing';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p528_grazing_type'] = $csv_line[6];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Prescribed Grazing.",
+    ];
+  }
+
+  public function process_range_planting(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_range_planting';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p550_species_category'] = $csv_line[6];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Range Planting.",
+    ];
+  }
+
+  public function process_residue_and_tillage_management_notill(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_residue_tillage_no_till';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p329_surface_disturbance'] = $csv_line[6];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Residue & Tillage Management, No Till.",
+    ];
+  }
+
+  public function process_residue_and_tillage_management_redtill(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_residue_till_reduced_till';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p345_surface_disturbance'] = $csv_line[6];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Residue & Tillage Management, Reduced Till.",
+    ];
+  }
+
+  public function process_riparian_forest_buffer(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_riparian_forest_buffer';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p391_species_category'] = $csv_line[6];
+      $supplemental_data_submission['csc_p391_species_density'] = $csv_line[7];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Riparian Forest Buffer.",
+    ];
+  }
+
+
+  public function process_riparian_herbaceous_cover(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_riparian_herbaceous_cover';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p390_species_category'] = $csv_line[6];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Riparean Herbaceous Cover.",
+    ];
+  }
+
+
+  public function process_roofs_and_covers(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_roofs_and_covers';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p367_roof_cover_type'] = $csv_line[6];
+      $supplemental_data_submission['csc_p367_roof_cover_type_other'] = $csv_line[7];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Roofs and Covers.",
+    ];
+  }
+
+  public function process_silvopasture(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_silvopasture';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p381_species_category'] = $csv_line[6];
+      $supplemental_data_submission['csc_p381_species_density'] = $csv_line[7];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Silvopasture.",
+    ];
+  }
+
+
+  public function process_stripcropping(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_stripcropping';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p585_strip_width'] = $csv_line[6];
+      $supplemental_data_submission['csc_p585_crop_category'] = $csv_line[7];
+      $supplemental_data_submission['csc_p585_number_of_strips'] = $csv_line[8];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Stripcropping.",
+    ];
+  }
+
+
+  public function process_tree_shrub_establishment(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_tree_shrub_establishment';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p612_species_category'] = $csv_line[6];
+      $supplemental_data_submission['csc_p612_species_density'] = $csv_line[7];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Tree Shrub Establishment.",
+    ];
+  }
+
+  public function process_vegetative_barrier(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_vegetative_barrier';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p601_species_category'] = $csv_line[6];
+      $supplemental_data_submission['csc_p601_barrier_width'] = $csv_line[7];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Vegetative Barrier.",
+    ];
+  }
+
+  public function process_waste_separation_facility(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_waste_separation_facility';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p632_separation_type'] = $csv_line[6];
+      $supplemental_data_submission['csc_p632_use_of_solids'] = $csv_line[7];
+      $supplemental_data_submission['csc_p632_use_of_solids_other'] = $csv_line[8];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Waste Separation Facility.",
+    ];
+  }
+
+
+  public function process_waste_storage_facility(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_waste_storage_facility';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p313_pri_waste_storage_sys'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'waste_storage_system', 'name' => $csv_line[6]]));
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Waste Storage Facility.",
+    ];
+  }
+
+  public function process_waste_treatment(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_waste_treatment';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p629_treatment_type'] = $csv_line[6];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Waste Treatment.",
+    ];
+  }
+
+  public function process_waste_treatment_lagoon(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_waste_treatment_lagoon';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p359_pri_waste_storage_sys'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['csc_vid' => 'waste_storage_system', 'name' => $csv_line[6]]));
+      $supplemental_data_submission['csc_p359_lagoon_cover_or_crust'] = filter_var($csv_line[7], FILTER_VALIDATE_BOOLEAN);
+      $supplemental_data_submission['csc_p359_lagoon_aeration'] = filter_var($csv_line[8], FILTER_VALIDATE_BOOLEAN);
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Waste Treatment Lagoon.",
+    ];
+  }
+
+  public function process_windshelter_est_reno(){
+    $file = \Drupal::request()->files->get("file");
+    $fName = $file->getClientOriginalName();
+    $fLoc = $file->getRealPath();
+    $csv = array_map('str_getcsv', file($fLoc));
+    array_shift($csv);
+    $out = 0;
+    
+    foreach($csv as $csv_line_raw) {
+      $csv_line = array_map('trim', $csv_line);
+
+      $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'f_enrollment_field_id' => $csv_line[3]]));
+      $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+      $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+      $supplemental_data_submission = [];
+      $supplemental_data_submission['type'] = 'csc_windbreak_shelterbelt';
+      $supplemental_data_submission['name'] = $csv_line[0];
+      $supplemental_data_submission['csc_field_id'] = $field_id;
+      $supplemental_data_submission['csc_project_id'] = $project_id;
+      $supplemental_data_submission['csc_p380_species_category'] = $csv_line[6];
+      $supplemental_data_submission['csc_p380_species_density'] = $csv_line[7];
+
+      $ps_to_save = Log::create($supplemental_data_submission);
+
+      $ps_to_save->save();
+      $out = $out + 1;      
+    }
+
+    return [
+      "#children" => "added " . $out . " Windbreak/Shelterbelt Establishment and Renovation.",
+    ];
+  }
+
+  public function processCoversheet($coversheet, $importFunction){
+    $dataArray = [];
+    $column = 2;
+    $row = 6;
   
-    foreach($csv as $csv_line) {
+    for($row; $row <= 16; $row++){
+      $cellValue = $coversheet->getCellByColumnAndRow($column, $row)->getValue();
   
-      $soil_sample_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'soil_health_sample', 'name' => $csv_line[0]]));
-      $lab_method = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'lab_testing_method', 'name' => $csv_line[1]]));
-      $project = \Drupal::entityTypeManager()->getStorage('asset')->load($lab_method->get('project')->target_id);
+      //read the cell
+      array_push($dataArray, $cellValue);
+    }
   
-      $soil_test_results_submission = [];
-      $soil_test_results_submission['name'] = 'Soil Test Results';
-      $soil_test_results_submission['type'] = 'lab_result';
-      $soil_test_results_submission['project'] = $project;
+    //import new coversheet
+    $importFunction($dataArray);
+
+    return $dataArray;
+
+  }
+
+  public function processImport($in_sheet, $importFunction, $end_column, $log_name="", $fields=""){
+    $record_count = 0;
+                
+    $start_column = 2;
+
+    $row = 7;
+
+    //the import template for field summary entity has its data starts on row 6
+    //while all other sheets start on row 7. the follow 3 line of code is created
+    //to adjust for this discrepancy. 
+    if($importFunction == 'import_field_summary'){
+      $row = 6;
+    }
+
+    for($row; ; $row++){
+      $startCell = Coordinate::stringFromColumnIndex($start_column) . $row;
+      $endCell = Coordinate::stringFromColumnIndex($end_column) . $row;
+
+      //read the entire row
+      $dataArray = $in_sheet
+        ->rangeToArray($startCell . ':' . $endCell);
+
+      //if the row is empty then we reach the end of rows and stop importing
+      if(empty(array_filter($dataArray[0]))){
+        break;
+      }
       
-      $soil_test_results_submission['field_lab_result_soil_sample'] = $soil_sample_id;
-      $soil_test_results_submission['field_lab_result_method'] = $lab_method;
-      $soil_test_results_submission['field_lab_result_raw_soil_organic_carbon'] = $csv_line[2];
-      $soil_test_results_submission['field_lab_result_raw_aggregate_stability'] = $csv_line[3];
-      $soil_test_results_submission['field_lab_result_raw_respiration'] =  $csv_line[4];
-      $soil_test_results_submission['field_lab_result_active_carbon'] = $csv_line[5];
-      $soil_test_results_submission['field_lab_result_available_organic_nitrogen'] = $csv_line[6];
-      $soil_test_results_submission['field_lab_result_sf_bulk_density_dry_weight'] = $csv_line[7];
-      $soil_test_results_submission['field_lab_result_sf_infiltration_rate'] = $csv_line[8];
-      $soil_test_results_submission['field_lab_result_sf_ph_value'] = $csv_line[9];
-      $soil_test_results_submission['field_lab_result_sf_electroconductivity'] = $csv_line[10];
-      $soil_test_results_submission['field_lab_result_sf_ec_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[11]]));
-      $soil_test_results_submission['field_lab_result_sf_cation_exchange_capacity'] = $csv_line[12];
-      $soil_test_results_submission['field_lab_result_sf_nitrate_n'] = $csv_line[13];
-      $soil_test_results_submission['field_lab_result_sf_nitrate_n_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[14]]));
-      $soil_test_results_submission['field_lab_result_sf_nitrogen_by_dry_combustion'] = $csv_line[15];
-      $soil_test_results_submission['field_lab_result_sf_phosphorous'] = $csv_line[16];
-      $soil_test_results_submission['field_lab_result_sf_phosphorous_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[17]]));
-      $soil_test_results_submission['field_lab_result_sf_potassium'] = $csv_line[18];
-      $soil_test_results_submission['field_lab_result_sf_potassium_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[19]]));
-      $soil_test_results_submission['field_lab_result_sf_calcium'] = $csv_line[20];  
-      $soil_test_results_submission['field_lab_result_sf_calcium_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[21]]));
-      $soil_test_results_submission['field_lab_result_sf_magnesium'] = $csv_line[22];
-      $soil_test_results_submission['field_lab_result_sf_magnesium_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[23]]));
-      $soil_test_results_submission['field_lab_result_sf_sulfur'] = $csv_line[24];
-      $soil_test_results_submission['field_lab_result_sf_sulfur_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[25]]));
-      $soil_test_results_submission['field_lab_result_sf_iron'] = $csv_line[26];
-      $soil_test_results_submission['field_lab_result_sf_iron_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[27]]));
-      $soil_test_results_submission['field_lab_result_sf_manganese'] = $csv_line[28];
-      $soil_test_results_submission['field_lab_result_sf_manganese_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[29]]));
-      $soil_test_results_submission['field_lab_result_sf_copper'] = $csv_line[30];
-      $soil_test_results_submission['field_lab_result_sf_copper_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[31]]));
-      $soil_test_results_submission['field_lab_result_sf_zinc'] = $csv_line[32];
-      $soil_test_results_submission['field_lab_result_sf_zinc_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[33]]));
-      $soil_test_results_submission['field_lab_result_sf_boron'] = $csv_line[34];
-      $soil_test_results_submission['field_lab_result_sf_boron_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[35]]));
-      $soil_test_results_submission['field_lab_result_sf_aluminum'] = $csv_line[36];
-      $soil_test_results_submission['field_lab_result_sf_aluminum_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[37]]));
-      $soil_test_results_submission['field_lab_result_sf_molybdenum'] = $csv_line[38];
-      $soil_test_results_submission['field_lab_result_sf_molybdenum_lab_interpretation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_lab_interpretation', 'name' => $csv_line[39]]));
-  
-      $soil_test_results_submission_to_save = Asset::create($soil_test_results_submission);
-        
-        $soil_test_results_submission_to_save->save();
-        $out = $out + 1;
+      //increment record count
+      $record_count = $record_count + 1;
+
+      //import new project summary record
+      $importFunction($dataArray[0], $record_count, $fields);
+      
     }
-      return [
-        "#children" => "saved " . $out . " soil test results.",
-      ];
-  }
 
+    return $record_count;
+    
+  }
 }
\ No newline at end of file
diff --color --color -rus ./web/modules/custom/csv_import/src/Controller/csvImportFunctions.php ./web/modules/custom/csv_import_csc/src/Controller/csvImportFunctions.php
--- ./web/modules/custom/csv_import/src/Controller/csvImportFunctions.php	2023-11-03 08:50:25
+++ ./web/modules/custom/csv_import_csc/src/Controller/csvImportFunctions.php	2023-11-03 08:50:25
@@ -3,56 +3,1594 @@
 use Drupal\asset\Entity\Asset;
 use Drupal\log\Entity\Log;
 
-function import_producer($in_data_array, $cur_count){
-    $producer_submission = [];
-    $producer_submission['type'] = 'producer';
-    $producer_submission['project'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'project', 'name' => $in_data_array[0]]));
-    $producer_submission['field_producer_first_name'] = $in_data_array[1];
-    $producer_submission['field_producer_last_name'] = $in_data_array[2];
-    $producer_submission['field_producer_headquarter'] = $in_data_array[3];
-    $producer_submission['name'] = $producer_submission['field_producer_first_name'] . " " . $producer_submission['field_producer_last_name'];
+function import_coversheet($in_data_array){
+    $in_data_array = array_map('trim', $in_data_array);
 
-    $ps_to_save = Asset::create($producer_submission);
+    $coversheet_submission = [];
+    $coversheet_submission['type'] = 'csc_project';
+    $coversheet_submission['name'] = $in_data_array[0];
+    $coversheet_submission['csc_project_id_field'] = $in_data_array[1];
+    $coversheet_submission['csc_project_grantee_org'] = $in_data_array[2];
+    $coversheet_submission['csc_project_grantee_cont_name'] = $in_data_array[3];
+    $coversheet_submission['csc_project_grantee_cont_email'] = $in_data_array[4];
+
+    $ndate = convertExcelDate($in_data_array[7]);
+    $coversheet_submission['csc_project_start'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+
+    $ndate = convertExcelDate($in_data_array[8]);
+    $coversheet_submission['csc_project_end'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+
+    $coversheet_submission['csc_project_budget'] = $in_data_array[9];
+
+    $cs_to_save = Asset::create($coversheet_submission);
             
-    $ps_to_save->save();
+    $cs_to_save->save();
 }
 
-function import_methods($in_data_array, $cur_count){
-    $methods_submission = [];
-    $methods_submission['type'] = 'lab_testing_method';
-    $methods_submission['field_lab_method_name'] = $in_data_array[0];
-    $methods_submission['field_lab_method_project'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'project', 'name' => $in_data_array[1]]));
-    $methods_submission['field_lab_soil_test_laboratory'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_laboratory', 'name' => $in_data_array[2]]));
-    $methods_submission['field_lab_method_aggregate_stability_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_aggregate_stability_me', 'name' => $in_data_array[4]]));
-    $methods_submission['field_lab_method_aggregate_stability_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_aggregate_stability_un', 'name' => $in_data_array[5]]));
-    $methods_submission['field_lab_method_respiration_incubation_days'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_respiration_incubation', 'name' => $in_data_array[6]]));
-    $methods_submission['field_lab_method_respiration_detection_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_respiration_detection_', 'name' => $in_data_array[7]]));
-    $methods_submission['field_lab_method_bulk_density_core_diameter'] = $in_data_array[8];
-    $methods_submission['field_lab_method_bulk_density_volume'] = $in_data_array[9];
-    $methods_submission['field_lab_method_infiltration_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_infiltration_method', 'name' => $in_data_array[10]]));
-    $methods_submission['field_lab_method_electroconductivity_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_ec_method', 'name' => $in_data_array[11]]));
-    $methods_submission['field_lab_method_nitrate_n_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_nitrate_n_method', 'name' => $in_data_array[12]]));
-    $methods_submission['field_lab_method_soil_ph_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_ph_method', 'name' => $in_data_array[13]]));
-    $methods_submission['field_lab_method_phosphorus_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[14]]));
-    $methods_submission['field_lab_method_potassium_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[15]]));
-    $methods_submission['field_lab_method_calcium_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[16]]));
-    $methods_submission['field_lab_method_magnesium_method'] =array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[17]]));
-    $methods_submission['field_lab_method_sulfur_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[18]]));
-    $methods_submission['field_lab_method_iron_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[19]]));
-    $methods_submission['field_lab_method_manganese_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[20]]));
-    $methods_submission['field_lab_method_copper_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[21]]));
-    $methods_submission['field_lab_method_zinc_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[22]]));
-    $methods_submission['field_lab_method_boron_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[23]]));
-    $methods_submission['field_lab_method_aluminum_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[24]]));
-    $methods_submission['field_lab_method_molybdenum_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'd_soil_health_extraction', 'name' => $in_data_array[25]]));
+function import_project_summary($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'ps'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
 
-    $methods_submission['name'] = $methods_submission['field_lab_method_name'];
-    $methods_submission['project'] = $methods_submission['field_lab_method_project'];
+    $project_summary_submission = [];
+    $project_summary_submission['type'] = 'csc_project_summary';
+    $project_summary_submission['name'] = $entry_name;
+    $project_summary_submission['csc_p_summary_commodity_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'commodity_term', 'name' => $in_data_array[0]]));
+    $project_summary_submission['csc_p_summary_commodity_sales'] = filter_var($in_data_array[1], FILTER_VALIDATE_BOOLEAN);
+    $project_summary_submission['csc_p_summary_farms_enrolled'] = filter_var($in_data_array[2], FILTER_VALIDATE_BOOLEAN);
+    $project_summary_submission['csc_p_summ_ghg_calculation_mthds'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_calculation_methods', 'name' => $in_data_array[3]]));
+    $project_summary_submission['csc_p_summ_ghg_cum_calculation'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_cumulative_calculation', 'name' => $in_data_array[4]]));
+    $project_summary_submission['csc_p_summary_ghg_benefits'] = $in_data_array[5];
+    $project_summary_submission['csc_p_summ_cum_carbon_stack'] = $in_data_array[6];
+    $project_summary_submission['csc_p_summ_cum_co2_benefit'] = $in_data_array[7];
+    $project_summary_submission['csc_p_summ_cum_ch4_benefit'] = $in_data_array[8];
+    $project_summary_submission['csc_p_summ_cum_n2o_benefit'] = $in_data_array[9];
+    $project_summary_submission['csc_p_summary_offsets_produced'] = $in_data_array[10];
+    $project_summary_submission['csc_p_summary_offsets_sale'] = $in_data_array[11];
+    $project_summary_submission['csc_p_summary_offsets_price'] = $in_data_array[12];
+    $project_summary_submission['csc_p_summary_insets_produced'] = $in_data_array[13];
+    $project_summary_submission['csc_p_summary_cost_on_farm'] = $in_data_array[14];
+    $project_summary_submission['csc_p_summary_mmrv_cost'] = $in_data_array[15];
+    $project_summary_submission['csc_p_summ_ghg_monitoring_mthd'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_monitoring_method', 'name' => $in_data_array[16]]));
+    $project_summary_submission['csc_p_summ_ghg_reporting_mthd'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_reporting_method', 'name' => $in_data_array[22]]));
+    $project_summary_submission['csc_p_summ_ghg_verification_mthd'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_verification_method', 'name' => $in_data_array[28]]));
 
-    $ps_to_save = Asset::create($methods_submission);
+    $ps_to_save = Asset::create($project_summary_submission);
             
     $ps_to_save->save();
 }
+
+function import_partner_activities($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'pa'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $partner_activities_submission = [];
+    $partner_activities_submission['type'] = 'csc_partner_activities';
+    $partner_activities_submission['name'] = $entry_name;
+    $partner_activities_submission['csc_prtnr_act_partner_ein'] = $in_data_array[0];
+    $partner_activities_submission['csc_prtnr_act_partner_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'partner_type', 'name' => $in_data_array[2]]));
+    $partner_activities_submission['csc_prtnr_act_partner_poc'] = $in_data_array[3];
+    $partner_activities_submission['csc_prtnr_act_partner_poc_email'] = $in_data_array[4];
+
+    $ndate = convertExcelDate($in_data_array[5]);
+    $partner_activities_submission['csc_prtnr_act_partnership_start'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+    
+    $ndate = convertExcelDate($in_data_array[6]);
+    $partner_activities_submission['csc_prtnr_act_partnership_end'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+
+    $partner_activities_submission['csc_prtnr_act_partnership_init'] = filter_var($in_data_array[7], FILTER_VALIDATE_BOOLEAN);
+    $partner_activities_submission['csc_prtnr_act_partner_total_req'] = $in_data_array[8];
+    $partner_activities_submission['csc_prtnr_act_total_match_contrib'] = $in_data_array[9];
+    $partner_activities_submission['csc_prtnr_act_total_match_incent'] = $in_data_array[10];
+    $partner_activities_submission['csc_prtnr_act_match_type_1'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'match_type', 'name' => $in_data_array[11]]));
+    $partner_activities_submission['csc_prtnr_act_match_amount_1'] = $in_data_array[12];
+    $partner_activities_submission['csc_prtnr_act_match_type_2'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'match_type', 'name' => $in_data_array[13]]));
+    $partner_activities_submission['csc_prtnr_act_match_amount_2'] = $in_data_array[14];
+    $partner_activities_submission['csc_prtnr_act_match_type_3'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'match_type', 'name' => $in_data_array[15]]));
+    $partner_activities_submission['csc_prtnr_act_match_amount_3'] = $in_data_array[16];
+    $partner_activities_submission['csc_prtnr_act_match_type_other'] = $in_data_array[17];
+
+    $training_provided = '';
+    for($i=18; $i<21; $i++){
+        if(!empty($in_data_array[$i])){
+            if($training_provided == ''){
+                $training_provided = $in_data_array[$i];
+            }else{
+                $training_provided = $training_provided . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+    $training_provided_array = array_map('trim', explode('|', $training_provided));
+      $training_provided_results = [];
+      foreach ($training_provided_array as $value) {
+        $training_provided_results = array_merge($training_provided_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'training_provided', 'name' => $value]));
+      }
+    $partner_activities_submission['csc_prtnr_act_training_provided'] = $training_provided_results;
+
+    $partner_activities_submission['csc_prtnr_act_training_other'] = $in_data_array[21];
+    $partner_activities_submission['csc_partner_activity_activity1'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'activity_by_partner', 'name' => $in_data_array[22]]));
+    $partner_activities_submission['csc_prtnr_act_activity1_cost'] = $in_data_array[23];
+    $partner_activities_submission['csc_partner_activity_activity2'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'activity_by_partner', 'name' => $in_data_array[24]]));
+    $partner_activities_submission['csc_prtnr_act_activity2_cost'] = $in_data_array[25];
+    $partner_activities_submission['csc_partner_activity_activity3'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'activity_by_partner', 'name' => $in_data_array[26]]));
+    $partner_activities_submission['csc_prtnr_act_activity3_cost'] = $in_data_array[27];
+    $partner_activities_submission['csc_prtnr_act_activity_other'] = $in_data_array[28];
+    $partner_activities_submission['csc_prtnr_act_products_supplied'] = $in_data_array[29];
+    $partner_activities_submission['csc_prtnr_act_product_source'] = $in_data_array[30];
+    
+    $ps_to_save = Asset::create($partner_activities_submission);
+
+    $ps_to_save->save();
+}
+
+function import_market_activities($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'ma'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $market_activities_submission = [];
+    $market_activities_submission['type'] = 'csc_market_activities';
+    $market_activities_submission['name'] = $entry_name;
+    $market_activities_submission['csc_m_activities_commodity_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'commodity_term', 'name' => $in_data_array[0]]));
+    $market_activities_submission['csc_m_act_mktng_chnl_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'marketing_channel_type', 'name' => $in_data_array[1]]));
+    $market_activities_submission['csc_m_act_mktng_chnl_type_otr'] = $in_data_array[2];
+    $market_activities_submission['csc_m_act_number_of_buyers'] = $in_data_array[3];
+
+    $buyer_names = '';
+    for($i=4; $i<5; $i++){
+        if(!empty($in_data_array[$i])){
+            if($buyer_names == ''){
+                $buyer_names = $in_data_array[$i];
+            }else{
+                $buyer_names = $buyer_names . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+    $market_activities_submission['csc_m_activities_buyer_names'] = array_map('trim', explode('|', $buyer_names));
+
+    $market_activities_submission['csc_m_act_mktng_chnl_geography'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'marketing_channel_geography', 'name' => $in_data_array[5]]));
+    $market_activities_submission['csc_m_activities_value_sold'] = $in_data_array[6];
+    $market_activities_submission['csc_m_activities_volume_sold'] = $in_data_array[7];
+    $market_activities_submission['csc_m_act_volume_sold_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'volume_sold_unit', 'name' => $in_data_array[8]]));
+    $market_activities_submission['csc_m_act_volume_unit_otr'] = $in_data_array[9];
+    $market_activities_submission['csc_m_activities_price_premium'] = $in_data_array[10];
+    $market_activities_submission['csc_m_act_price_premium_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'price_premium_unit', 'name' => $in_data_array[11]]));
+    $market_activities_submission['csc_m_act_price_premium_unit_otr'] = $in_data_array[12];
+    $market_activities_submission['csc_m_act_price_premium_to_prod'] = $in_data_array[13];
+
+    $product_differentiation = '';
+    for($i=14; $i<17; $i++){
+        if(!empty($in_data_array[$i])){
+            if($product_differentiation == ''){
+                $product_differentiation = $in_data_array[$i];
+            }else{
+                $product_differentiation = $product_differentiation . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+    $product_differentiation_method_array = array_map('trim', explode('|', $product_differentiation));
+    $product_differentiation_method_results = [];
+    foreach ($product_differentiation_method_array as $value) {
+      $product_differentiation_method_results = array_merge($product_differentiation_method_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'product_differentiation_method', 'name' => $value]));
+    }
+    $market_activities_submission['csc_m_act_product_diff_mthd'] = $product_differentiation_method_results;
+
+    $market_activities_submission['csc_m_act_product_diff_mthd_otr'] = $in_data_array[17];
+
+    $marketing_method = '';
+    for($i=18; $i<21; $i++){
+        if(!empty($in_data_array[$i])){
+            if($marketing_method == ''){
+                $marketing_method = $in_data_array[$i];
+            }else{
+                $marketing_method = $marketing_method . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+    $marketing_method_array = array_map('trim', explode('|', $marketing_method));
+    $marketing_method_results = [];
+    foreach ($marketing_method_array as $value) {
+      $marketing_method_results = array_merge($marketing_method_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'marketing_method', 'name' => $value]));
+    }
+    $market_activities_submission['csc_m_act_mktng_mthd'] = $marketing_method_results;
+
+    $market_activities_submission['csc_m_act_mktng_mthd_otr'] = $in_data_array[21];
+
+    $marketing_channel_identification = '';
+    for($i=22; $i<25; $i++){
+        if(!empty($in_data_array[$i])){
+            if($marketing_channel_identification == ''){
+                $marketing_channel_identification = $in_data_array[$i];
+            }else{
+                $marketing_channel_identification = $marketing_channel_identification . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+    $marketing_channel_identification_array = array_map('trim', explode('|', $marketing_channel_identification));
+      $marketing_channel_identification_results = [];
+      foreach ($marketing_channel_identification_array as $value) {
+        $marketing_channel_identification_results = array_merge($marketing_channel_identification_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'marketing_channel_identification', 'name' => $value]));
+      }
+    $market_activities_submission['csc_m_act_mktng_chnl_id'] = $marketing_channel_identification_results;
+
+    $market_activities_submission['csc_m_act_mktng_chnl_id_mthd_otr'] = $in_data_array[25];
+
+    $traceability_method = '';
+    for($i=26; $i<29; $i++){
+        if(!empty($in_data_array[$i])){
+            if($traceability_method == ''){
+                $traceability_method = $in_data_array[$i];
+            }else{
+                $traceability_method = $traceability_method . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+    $traceability_method_array = array_map('trim', explode('|', $traceability_method));
+      $traceability_method_results = [];
+      foreach ($traceability_method_array as $value) {
+        $traceability_method_results = array_merge($traceability_method_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'traceability_method', 'name' => $value]));
+      }
+    $market_activities_submission['csc_m_act_traceability_mthd'] = $traceability_method_results;
+
+    $market_activities_submission['csc_m_act_traceability_mthd_otr'] = $in_data_array[29];
+    $ps_to_save = Log::create($market_activities_submission);
+
+    $ps_to_save->save();
+}
+
+function import_producer_enrollment($in_data_array, $cur_count, $project_id_field){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'pe'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $producer_enrollment_submission = [];
+    $producer_enrollment_submission['type'] = 'csc_producer_enrollment';
+    $producer_enrollment_submission['name'] = $entry_name;
+    $producer_enrollment_submission['csc_project_id'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_project', 'csc_project_id_field' => $project_id_field]));
+    $producer_enrollment_submission['csc_p_enrollment_farm_id'] = $in_data_array[0];
+    $producer_enrollment_submission['csc_p_enrollment_state'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'state', 'name' =>  $in_data_array[1]]));
+    $producer_enrollment_submission['csc_p_enrollment_county'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'county', 'name' =>  $in_data_array[2]]));
+
+    $ndate = convertExcelDate($in_data_array[4]);
+    $producer_enrollment_submission['csc_p_enrollment_start_date'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+    $producer_enrollment_submission['csc_p_enrlmnt_underserved_status'] = $in_data_array[6];
+    $producer_enrollment_submission['csc_p_enrollment_total_area'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'total_area', 'name' => $in_data_array[7]]));
+    $producer_enrollment_submission['csc_p_enrlmnt_total_crop_area'] = $in_data_array[8];
+    $producer_enrollment_submission['csc_p_enrlmnt_total_livstk_area'] = $in_data_array[9];
+    $producer_enrollment_submission['csc_p_enrlmnt_total_forest_area'] = $in_data_array[10];
+    $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_1'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'livestock_type', 'name' => $in_data_array[11]]));
+    $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_1_cnt'] = $in_data_array[12];
+    $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_2'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'livestock_type', 'name' => $in_data_array[13]]));
+    $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_2_cnt'] = $in_data_array[14];
+    $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_3'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'livestock_type', 'name' => $in_data_array[15]]));
+    $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_3_cnt'] = $in_data_array[16];
+    $producer_enrollment_submission['csc_p_enrlmnt_livstk_type_otr'] = $in_data_array[17];
+    $producer_enrollment_submission['csc_p_enrollment_organic_farm'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'organic_farm', 'name' => $in_data_array[18]]));
+    $producer_enrollment_submission['csc_p_enrollment_organic_fields'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'organic_fields', 'name' => $in_data_array[19]]));
+    $producer_enrollment_submission['csc_p_enrlmnt_prod_motivation'] = $in_data_array[20];
+
+    $producer_outreach_v = '';
+    for($i=21; $i<24; $i++){
+        if(!empty($in_data_array[$i])){
+            if($producer_outreach_v == ''){
+                $producer_outreach_v = $in_data_array[$i];
+            }else{
+                $producer_outreach_v = $producer_outreach_v . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+
+    $producer_outreach_array = array_map('trim', explode('|', $producer_outreach_v));
+
+    $producer_outreach_results = [];
+    foreach ($producer_outreach_array as $value) {
+      $producer_outreach_results = array_merge($producer_outreach_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'producer_outreach', 'name' => $value]));
+    }
+    $producer_enrollment_submission['csc_p_enrlmnt_prod_outreach'] = $producer_outreach_results;
+    $producer_enrollment_submission['csc_p_enrlmnt_prod_outreach_otr'] = $in_data_array[24];
+    $producer_enrollment_submission['csc_p_enrlmnt_csaf_experience'] =array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'csaf_experience', 'name' => $in_data_array[25]]));
+    $producer_enrollment_submission['csc_p_enrlmnt_csaf_federal_fds'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'csaf_federal_funds', 'name' => $in_data_array[26]]));
+    $producer_enrollment_submission['csc_p_enrlmnt_csaf_st_local_fds'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'csaf_state_or_local_funds', 'name' => $in_data_array[27]]));
+    $producer_enrollment_submission['csc_p_enrlmnt_csaf_nonprofit_fds'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'csaf_nonprofit_funds', 'name' => $in_data_array[28]]));
+    $producer_enrollment_submission['csc_p_enrlmnt_csaf_market_incent'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'csaf_market_incentives', 'name' => $in_data_array[29]]));
+    
+    $ps_to_save = Asset::create($producer_enrollment_submission);
+
+    $ps_to_save->save();
+
+}
+
+function import_field_enrollment($in_data_array, $cur_count, $project_id_field){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'fe'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_enrollment_submission = [];
+    $field_enrollment_submission['type'] = 'csc_field_enrollment';
+    $field_enrollment_submission['name'] = $entry_name;
+
+    $project = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_project', 'csc_project_id_field' => $project_id_field]));
+    $project_id = $project->id();
+    $field_enrollment_submission['csc_f_enrollment_producer_id'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_producer_enrollment', 'csc_project_id' => $project_id]));
+
+    $field_enrollment_submission['csc_f_enrollment_tract_id'] = $in_data_array[1];
+    $field_enrollment_submission['csc_f_enrollment_field_id'] = $in_data_array[2];
+    $field_enrollment_submission['csc_f_enrollment_state'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'state', 'name' => $in_data_array[3]]));
+    $field_enrollment_submission['csc_f_enrollment_county'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'county', 'name' => $in_data_array[4]]));
+    $field_enrollment_submission['csc_f_enrollment_prior_field_id'] = $in_data_array[5];
+
+    /*
+    $producer_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')
+        ->loadByProperties(['type' => 'csc_producer_enrollment', 
+                            'csc_p_enrollment_farm_id' => $in_data_array[0], 
+                            'csc_p_enrollment_state.entity.name' => $in_data_array[3]]));
+    $field_enrollment_submission['csc_f_enrollment_producer_id'] = $producer_id;
+    */
+
+    $ndate = convertExcelDate($in_data_array[7]);
+    $field_enrollment_submission['csc_f_enrollment_start_date'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+    $field_enrollment_submission['csc_f_nrlmnt_total_field_area'] = $in_data_array[8];
+    $field_enrollment_submission['csc_f_nrlmnt_commodity_category'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'commodity_category', 'name' => $in_data_array[9]]));
+    $field_enrollment_submission['csc_f_enrollment_commodity_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'commodity_term', 'name' => $in_data_array[10]]));
+    $field_enrollment_submission['csc_f_enrollment_baseline_yield'] = $in_data_array[11];
+    $field_enrollment_submission['csc_f_nrlmnt_base_yield_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'baseline_yield_unit', 'name' => $in_data_array[12]]));
+    $field_enrollment_submission['csc_f_nrlmnt_base_yield_unit_otr'] = $in_data_array[13];
+    $field_enrollment_submission['csc_f_nrlmnt_base_yield_loc'] = $in_data_array[14];
+    $field_enrollment_submission['csc_f_nrlmnt_base_yield_loc_otr'] = $in_data_array[15];
+    $field_enrollment_submission['csc_f_enrollment_field_land_use'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_land_use', 'name' => $in_data_array[16]]));
+    $field_enrollment_submission['csc_f_nrlmnt_field_irrigated'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_irrigated', 'name' => $in_data_array[17]]));
+    $field_enrollment_submission['csc_f_enrollment_field_tillage'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_tillage', 'name' => $in_data_array[18]]));
+    $field_enrollment_submission['csc_f_nrlmnt_prac_pri_util_prcnt'] = $in_data_array[19];
+    $field_enrollment_submission['csc_f_nrlmnt_field_any_csaf_prac'] = $in_data_array[20];
+    $field_enrollment_submission['csc_f_nrlmnt_field_prac_pri_util'] = $in_data_array[21];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_type_1'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $in_data_array[22]]));
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_1'] = $in_data_array[23];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_1'] = $in_data_array[24];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_year_1'] = $in_data_array[25];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_1'] = $in_data_array[26];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_1'] = $in_data_array[27];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_1'] = $in_data_array[28];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_type_2'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $in_data_array[29]]));
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_2'] = $in_data_array[30];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_2'] = $in_data_array[31];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_year_2'] = $in_data_array[32];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_2'] = $in_data_array[33];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_2'] = $in_data_array[34];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_2'] = $in_data_array[35];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_type_3'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $in_data_array[36]]));
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_3'] = $in_data_array[37];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_3'] = $in_data_array[38];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_year_3'] = $in_data_array[39];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_3'] = $in_data_array[40];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_3'] = $in_data_array[41];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_3'] = $in_data_array[42];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_type_4'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $in_data_array[43]]));
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_4'] = $in_data_array[44];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_4'] = $in_data_array[45];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_year_4'] = $in_data_array[46];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_4'] = $in_data_array[47];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_4'] = $in_data_array[48];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_4'] = $in_data_array[49];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_type_5'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $in_data_array[50]]));
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_5'] = $in_data_array[51];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_5'] = $in_data_array[52];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_year_5'] = $in_data_array[53];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_5'] = $in_data_array[54];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_5'] = $in_data_array[55];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_5'] = $in_data_array[56];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_type_6'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $in_data_array[57]]));
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_6'] = $in_data_array[58];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_6'] = $in_data_array[59];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_year_6'] = $in_data_array[60];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_6'] = $in_data_array[61];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_6'] = $in_data_array[62];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_6'] = $in_data_array[63];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_type_7'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $in_data_array[64]]));
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_7'] = $in_data_array[65];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_std_otr_7'] = $in_data_array[66];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_year_7'] = $in_data_array[67];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_7'] = $in_data_array[68];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_7'] = $in_data_array[69];
+    $field_enrollment_submission['csc_f_nrlmnt_prac_ext_unit_otr_7'] = $in_data_array[70];
+    
+    $ps_to_save = Asset::create($field_enrollment_submission);
+
+    $ps_to_save->save();
+
+}
+
+function import_farm_summary($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'fa'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $farm_summary_submission = [];
+    $farm_summary_submission['type'] = 'farm_summary';
+    $farm_summary_submission['name'] = $entry_name;
+    $farm_summary_submission['farm_summary_fiscal_year'] = '';
+    $farm_summary_submission['farm_summary_fiscal_quarter'] = '';
+    $farm_summary_submission['farm_summary_state'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'state', 'name' => $in_data_array[1]]));
+    $farm_summary_submission['farm_summary_county'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'county', 'name' => $in_data_array[2]]));
+    
+    $producer_ta_received_v = '';
+    for($i=3; $i<6; $i++){
+        if(!empty($in_data_array[$i])){
+            if($producer_ta_received_v == ''){
+                $producer_ta_received_v = $in_data_array[$i];
+            }else{
+                $producer_ta_received_v = $producer_ta_received_v . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+    
+    $producer_ta_received_array = array_map('trim', explode('|', $producer_ta_received_v));
+    $producer_ta_received_results = [];
+    foreach ($producer_ta_received_array as $value) {
+      $producer_ta_received_results = array_merge($producer_ta_received_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'producer_ta_received', 'name' => $value]));
+    }
+    $farm_summary_submission['farm_summary_producer_ta_received'] = $producer_ta_received_results;
+    $farm_summary_submission['farm_summary_producer_ta_received_other'] = $in_data_array[6];
+    $farm_summary_submission['farm_summary_producer_incentive_amount'] = $in_data_array[7];
+
+    $incentive_reason_v = '';
+    for($i=8; $i<12; $i++){
+        if(!empty($in_data_array[$i])){
+            if($incentive_reason_v == ''){
+                $incentive_reason_v = $in_data_array[$i];
+            }else{
+                $incentive_reason_v = $incentive_reason_v . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+
+    $incentive_reason_array = array_map('trim', explode('|', $incentive_reason_v));
+    $incentive_reason_results = [];
+    foreach ($incentive_reason_array as $value) {
+      $incentive_reason_results = array_merge($incentive_reason_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'incentive_reason', 'name' => $value]));
+    }
+    $farm_summary_submission['farm_summary_incentive_reason'] = $incentive_reason_results;
+    $farm_summary_submission['farm_summary_incentive_reason_other'] = $in_data_array[12];
+ 
+    $incentive_structure_v = '';
+    for($i=13; $i<17; $i++){
+        if(!empty($in_data_array[$i])){
+            if($incentive_structure_v == ''){
+                $incentive_structure_v = $in_data_array[$i];
+            }else{
+                $incentive_structure_v = $incentive_structure_v . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+ 
+    $incentive_structure_array = array_map('trim', explode('|', $incentive_structure_v));
+    $incentive_structure_results = [];
+    foreach ($incentive_structure_array as $value) {
+      $incentive_structure_results = array_merge($incentive_structure_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'incentive_structure', 'name' => $value]));
+    }
+    $farm_summary_submission['farm_summary_incentive_structure'] = $incentive_structure_results;
+    $farm_summary_submission['farm_summary_incentive_structure_other'] = $in_data_array[17];
+
+    $incentive_type_v = '';
+    for($i=18; $i<22; $i++){
+        if(!empty($in_data_array[$i])){
+            if($incentive_type_v == ''){
+                $incentive_type_v = $in_data_array[$i];
+            }else{
+                $incentive_type_v = $incentive_type_v . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+
+    $incentive_type_array = array_map('trim', explode('|', $incentive_type_v));
+    $incentive_type_results = [];
+    foreach ($incentive_type_array as $value) {
+      $incentive_type_results = array_merge($incentive_type_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'incentive_type', 'name' => $value]));
+    }
+    $farm_summary_submission['farm_summary_incentive_type'] = $incentive_type_results;
+    $farm_summary_submission['farm_summary_incentive_type_other'] = $in_data_array[22];
+    $farm_summary_submission['farm_summary_payment_on_enrollment'] = $in_data_array[23];
+    $farm_summary_submission['farm_summary_payment_on_implementation'] = $in_data_array[24];
+    $farm_summary_submission['farm_summary_payment_on_harvest'] = $in_data_array[25];
+    $farm_summary_submission['farm_summary_payment_on_mmrv'] = $in_data_array[26];
+    $farm_summary_submission['farm_summary_payment_on_sale'] = $in_data_array[27];
+    
+    $ps_to_save = Log::create($farm_summary_submission);
+
+    $ps_to_save->save();
+
+}
+
+function import_field_summary($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'fs'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_summary_submission = [];
+    $field_summary_submission['type'] = 'field_summary';
+    $field_summary_submission['name'] = $entry_name;
+    $field_summary_submission['status'] = '';
+    $field_summary_submission['flag'] = '';
+    $field_summary_submission['notes'] = '';
+
+    $ndate = convertExcelDate($in_data_array[14]);
+    $field_summary_submission['f_summary_contract_end_date'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+    $field_summary_submission['f_summary_implementation_cost_coverage'] = $in_data_array[25];
+    $field_summary_submission['f_summary_implementation_cost'] = $in_data_array[22];
+    $field_summary_submission['f_summary_implementation_cost_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'cost_unit', 'name' => $in_data_array[23]]));
+    
+    $ndate = convertExcelDate($in_data_array[13]);
+    $field_summary_submission['f_summary_date_practice_complete'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+    $field_summary_submission['f_summary_fiscal_quarter'] = '';
+    $field_summary_submission['f_summary_fiscal_year'] = '';
+    $field_summary_submission['f_summary_field_commodity_value'] = $in_data_array[18];
+    $field_summary_submission['f_summary_field_commodity_volume'] = $in_data_array[19];
+    $field_summary_submission['f_summary_field_commodity_volume_unit'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_commodity_volume_unit', 'name' => $in_data_array[20]]));
+    $field_summary_submission['f_summary_field_ghg_calculation'] = $in_data_array[38];
+
+    $summary_field_ghg_monitoring = '';
+    for($i=26; $i<29; $i++){
+        if(!empty($in_data_array[$i])){
+            if($summary_field_ghg_monitoring == ''){
+                $summary_field_ghg_monitoring = $in_data_array[$i];
+            }else{
+                $summary_field_ghg_monitoring = $summary_field_ghg_monitoring . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+
+    $summary_field_ghg_monitoring_array = array_map('trim', explode('|', $summary_field_ghg_monitoring));
+    $summary_field_ghg_monitoring_results = [];
+
+    foreach ($summary_field_ghg_monitoring_array as $value) {
+        $summary_field_ghg_monitoring_results = array_merge($summary_field_ghg_monitoring_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_ghg_monitoring', 'name' => $value]));
+    }
+
+    $field_summary_submission['f_summary_field_ghg_monitoring'] = $summary_field_ghg_monitoring_results;
+
+    $summary_field_ghg_reporting = '';
+    for($i=30; $i<33; $i++){
+        if(!empty($in_data_array[$i])){
+            if($summary_field_ghg_reporting == ''){
+                $summary_field_ghg_reporting = $in_data_array[$i];
+            }else{
+                $summary_field_ghg_reporting = $summary_field_ghg_reporting . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+
+    $summary_field_ghg_reporting_array = array_map('trim', explode('|', $summary_field_ghg_reporting));
+    $summary_field_ghg_reporting_results = [];
+
+    foreach ($summary_field_ghg_reporting_array as $value) {
+        $summary_field_ghg_reporting_results = array_merge($summary_field_ghg_reporting_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_ghg_reporting', 'name' => $value]));
+    }
+
+    $field_summary_submission['f_summary_field_ghg_reporting'] = $summary_field_ghg_reporting_results;
+
+    $summary_field_ghg_verification = '';
+    for($i=34; $i<37; $i++){
+        if(!empty($in_data_array[$i])){
+            if($summary_field_ghg_verification == ''){
+                $summary_field_ghg_verification = $in_data_array[$i];
+            }else{
+                $summary_field_ghg_verification = $summary_field_ghg_verification . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+
+    $summary_field_ghg_verification_array = array_map('trim', explode('|', $summary_field_ghg_verification));
+    $summary_field_ghg_verification_results = [];
+
+    foreach ($summary_field_ghg_verification_array as $value) {
+        $summary_field_ghg_verification_results = array_merge($summary_field_ghg_verification_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'field_ghg_verification', 'name' => $value]));
+    }
+
+    $field_summary_submission['f_summary_field_ghg_verification'] = $summary_field_ghg_verification_results;
+    $field_summary_submission['f_summary_field_insets'] = $in_data_array[46];
+    $field_summary_submission['f_summary_field_carbon_stock'] = $in_data_array[41];
+    $field_summary_submission['f_summary_field_ch4_emission_reduction'] = $in_data_array[43];
+    $field_summary_submission['f_summary_field_co2_emission_reduction'] = $in_data_array[42];
+    $field_summary_submission['f_summary_field_ghg_emission_reduction'] = $in_data_array[40];
+    $field_summary_submission['f_summary_field_official_ghg_calculations'] = $in_data_array[39];
+    $field_summary_submission['f_summary_field_n2o_emission_reduction'] = $in_data_array[44];
+    $field_summary_submission['f_summary_field_offsets'] = $in_data_array[45];
+    $field_summary_submission['f_summary_commodity_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'commodity_term', 'name' => $in_data_array[5]]));
+    $field_summary_submission['f_summary_incentive_per_acre_or_head'] = $in_data_array[17];
+    $field_summary_submission['f_summary_marketing_assistance_provided'] = $in_data_array[16];
+    $field_summary_submission['f_summary_mmrv_assistance_provided'] = $in_data_array[15];
+    $field_summary_submission['f_summary_implementation_cost_unit_other'] = $in_data_array[24];
+    $field_summary_submission['f_summary_field_commodity_volume_unit_other'] = $in_data_array[21];
+    $field_summary_submission['f_summary_field_ghg_monitoring_other'] = $in_data_array[29];
+    $field_summary_submission['f_summary_field_ghg_reporting_other'] = $in_data_array[33];
+    $field_summary_submission['f_summary_field_ghg_verification_other'] = $in_data_array[37];
+    $field_summary_submission['f_summary_field_measurement_other'] = $in_data_array[47];
+
+    $summary_practice_type = '';
+    for($i=6; $i<13; $i++){
+        if(!empty($in_data_array[$i])){
+            if($summary_practice_type == ''){
+                $summary_practice_type = $in_data_array[$i];
+            }else{
+                $summary_practice_type = $summary_practice_type . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+
+    $summary_practice_type_array = array_map('trim', explode('|', $summary_practice_type));
+    $summary_practice_type_results = [];
+
+    foreach ($summary_practice_type_array as $value) {
+        $summary_practice_type_results = array_merge($summary_practice_type_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $value]));
+    }
+   
+    $field_summary_submission['f_summary_practice_type'] = $summary_practice_type_results;
+
+    $field_summary_submission['f_summary_field_id'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'name' => $in_data_array[2]]));
+    
+    $ps_to_save = Log::create($field_summary_submission);
+
+    $ps_to_save->save();
+}
+
+function import_ghg_benefits_alt_models($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'gbam'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $g_benefits_alternate_modeledsubmission = [];
+    $g_benefits_alternate_modeledsubmission['name'] = $entry_name;
+    $g_benefits_alternate_modeledsubmission['type'] = 'ghg_benefits_alternate_modeled';
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_fiscal_year'] = '';
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_fiscal_quarter'] = '';
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_field_id'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'name' => $in_data_array[2]]));
+
+    $g_benefits_alternate_modeled_commodity_type = '';
+    for($i=5; $i<11; $i++){
+        if(!empty($in_data_array[$i])){
+            if($g_benefits_alternate_modeled_commodity_type == ''){
+                $g_benefits_alternate_modeled_commodity_type = $in_data_array[$i];
+            }else{
+                $g_benefits_alternate_modeled_commodity_type = $g_benefits_alternate_modeled_commodity_type . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+
+    $g_benefits_alternate_modeled_commodity_type_array = array_map('trim', explode('|', $g_benefits_alternate_modeled_commodity_type));
+    
+    $g_benefits_alternate_modeled_commodity_type_results = [];
+    foreach ($g_benefits_alternate_modeled_commodity_type_array as $value) {
+      $g_benefits_alternate_modeled_commodity_type_results = array_merge($g_benefits_alternate_modeled_commodity_type_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'commodity_term', 'name' => $value]));
+    }
+    
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_commodity_type'] = $g_benefits_alternate_modeled_commodity_type_results;
+
+    $g_benefits_alternate_modeled_practice_type = '';
+    for($i=11; $i<18; $i++){
+        if(!empty($in_data_array[$i])){
+            if($g_benefits_alternate_modeled_practice_type == ''){
+                $g_benefits_alternate_modeled_practice_type = $in_data_array[$i];
+            }else{
+                $g_benefits_alternate_modeled_practice_type = $g_benefits_alternate_modeled_practice_type . ' | ' . $in_data_array[$i];
+            }
+        }
+    }
+
+    $g_benefits_alternate_modeled_practice_type_array = array_map('trim', explode('|', $g_benefits_alternate_modeled_practice_type));
+    $g_benefits_alternate_modeled_practice_type_results = [];
+    foreach ($g_benefits_alternate_modeled_practice_type_array as $value) {
+      $g_benefits_alternate_modeled_practice_type_results = array_merge($g_benefits_alternate_modeled_practice_type_results, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'practice_type', 'name' => $value]));
+    }
+
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_practice_type'] = $g_benefits_alternate_modeled_practice_type_results;
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_ghg_model'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_model', 'name' => $in_data_array[18]]));
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_ghg_model_other'] = $in_data_array[19];
+    $ndate = convertExcelDate($in_data_array[20]);
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_model_start_date'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+    $ndate = convertExcelDate($in_data_array[21]);
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_model_end_date'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_ghg_benefits_estimated'] = $in_data_array[22];
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_carbon_stock_estimated'] = $in_data_array[23];
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_co2_estimated'] = $in_data_array[24];
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_ch4_estimated'] = $in_data_array[25];
+    $g_benefits_alternate_modeledsubmission['g_benefits_alternate_modeled_n2o_estimated'] = $in_data_array[26];
+
+    $gbam_to_save = log::create($g_benefits_alternate_modeledsubmission);
+
+    $gbam_to_save->save();
+}
+
+function import_ghg_benefits_measured($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'gbm'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $ghg_benefits_measured_submission = [];
+    $ghg_benefits_measured_submission['type'] = 'ghg_benefits_measured';
+    $ghg_benefits_measured_submission['name'] = $entry_name;
+    $ghg_benefits_measured_submission['g_benefits_measured_field_id'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'name' => $in_data_array[2]]));
+    $ghg_benefits_measured_submission['g_benefits_measured_fiscal_quarter'] = '';
+    $ghg_benefits_measured_submission['g_benefits_measured_fiscal_year'] = '';
+    $ghg_benefits_measured_submission['g_benefits_measured_ghg_measurement_method'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'ghg_measurement_method', 'name' => $in_data_array[5]]));
+    $ghg_benefits_measured_submission['g_benefits_measured_ghg_measurement_method_other'] = $in_data_array[6];
+    $ghg_benefits_measured_submission['g_benefits_measured_lab_name'] = $in_data_array[7];
+    $ndate = convertExcelDate($in_data_array[8]);
+    $ghg_benefits_measured_submission['g_benefits_measured_measurement_start_date'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+    $ndate = convertExcelDate($in_data_array[9]);
+    $ghg_benefits_measured_submission['g_benefits_measured_measurement_end_date'] = \DateTime::createFromFormat(getExcelDateFormat(), $ndate)->getTimestamp();
+    $ghg_benefits_measured_submission['g_benefits_measured_total_co2_reduction'] = $in_data_array[10];
+    $ghg_benefits_measured_submission['g_benefits_measured_total_field_carbon_stock'] = $in_data_array[11];
+    $ghg_benefits_measured_submission['g_benefits_measured_total_ch4_reduction'] = $in_data_array[12];
+    $ghg_benefits_measured_submission['g_benefits_measured_total_n2o_reduction'] = $in_data_array[13];
+    $ghg_benefits_measured_submission['g_benefits_measured_soil_sample_result'] = $in_data_array[14];
+    $ghg_benefits_measured_submission['g_benefits_measured_soil_sample_result_unit'] = $in_data_array[15];
+    $ghg_benefits_measured_submission['g_benefits_measured_soil_sample_result_unit_other'] = $in_data_array[16];
+    $ghg_benefits_measured_submission['g_benefits_measured_measurement_type'] = $in_data_array[17];
+    $ghg_benefits_measured_submission['g_benefits_measured_measurement_type_other'] =$in_data_array[18];
+    
+    $ps_to_save = Log::create($ghg_benefits_measured_submission);
+
+    $ps_to_save->save();
+}
+
+function import_addl_envl_benefits($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'aeb'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $environmental_benefits_submission = [];
+    $environmental_benefits_submission['type'] = 'environmental_benefits';
+    $environmental_benefits_submission['name'] = $entry_name;
+    $environmental_benefits_submission['fiscal_year'] = '';
+    $environmental_benefits_submission['fiscal_quarter'] = '';
+    $environmental_benefits_submission['field_id'] = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'name' => $in_data_array[2]]));
+    $environmental_benefits_submission['environmental_benefits'] = $in_data_array[5];
+    $environmental_benefits_submission['nitrogen_loss'] = $in_data_array[6];
+    $environmental_benefits_submission['nitrogen_loss_amount'] = $in_data_array[7];
+    $environmental_benefits_submission['nitrogen_loss_amount_unit'] = $in_data_array[8];
+    $environmental_benefits_submission['nitrogen_loss_amount_unit_other'] = $in_data_array[9];
+    $environmental_benefits_submission['nitrogen_loss_purpose'] = $in_data_array[10];
+    $environmental_benefits_submission['nitrogen_loss_purpose_other'] = $in_data_array[11];
+    $environmental_benefits_submission['phosphorus_loss'] = $in_data_array[12];
+    $environmental_benefits_submission['phosphorus_loss_amount'] = $in_data_array[13];
+    $environmental_benefits_submission['phosphorus_loss_amount_unit'] = $in_data_array[14];
+    $environmental_benefits_submission['phosphorus_loss_amount_unit_other'] = $in_data_array[15];
+    $environmental_benefits_submission['phosphorus_loss_purpose'] = $in_data_array[16];
+    $environmental_benefits_submission['phosphorus_loss_purpose_other'] = $in_data_array[17];
+    $environmental_benefits_submission['other_water_quality'] = $in_data_array[18];
+    $environmental_benefits_submission['other_water_quality_type'] = $in_data_array[19];
+    $environmental_benefits_submission['other_water_quality_type_other'] = $in_data_array[20];
+    $environmental_benefits_submission['other_water_quality_amount'] = $in_data_array[21];
+    $environmental_benefits_submission['other_water_quality_amount_unit'] = $in_data_array[22];
+    $environmental_benefits_submission['other_water_quality_amount_unit_other'] = $in_data_array[23];
+    $environmental_benefits_submission['other_water_quality_purpose'] = $in_data_array[24];
+    $environmental_benefits_submission['other_water_quality_purpose_other'] = $in_data_array[25];
+    $environmental_benefits_submission['water_quality'] = $in_data_array[26];
+    $environmental_benefits_submission['water_quality_amount'] = $in_data_array[27];
+    $environmental_benefits_submission['water_quality_amount_unit'] = $in_data_array[28];
+    $environmental_benefits_submission['water_quality_amount_unit_other'] = $in_data_array[29];
+    $environmental_benefits_submission['water_quality_purpose'] = $in_data_array[30];
+    $environmental_benefits_submission['water_quality_purpose_other'] = $in_data_array[31];
+    $environmental_benefits_submission['reduced_erosion'] = $in_data_array[32];
+    $environmental_benefits_submission['reduced_erosion_amount'] = $in_data_array[33];
+    $environmental_benefits_submission['reduced_erosion_amount_unit'] = $in_data_array[34];
+    $environmental_benefits_submission['reduced_erosion_amount_unit_other'] = $in_data_array[35];
+    $environmental_benefits_submission['reduced_erosion_purpose'] = $in_data_array[36];
+    $environmental_benefits_submission['reduced_erosion_purpose_other'] = $in_data_array[37];
+    $environmental_benefits_submission['reduced_energy_use'] = $in_data_array[38];
+    $environmental_benefits_submission['reduced_energy_use_amount'] = $in_data_array[39];
+    $environmental_benefits_submission['reduced_energy_use_amount_unit'] = $in_data_array[40];
+    $environmental_benefits_submission['reduced_energy_use_amount_unit_other'] = $in_data_array[41];
+    $environmental_benefits_submission['reduced_energy_use_purpose'] = $in_data_array[42];
+    $environmental_benefits_submission['reduced_energy_use_purpose_other'] = $in_data_array[43];
+    $environmental_benefits_submission['avoided_land_conversion'] = $in_data_array[44];
+    $environmental_benefits_submission['avoided_land_conversion_amount'] = $in_data_array[45];
+    $environmental_benefits_submission['avoided_land_conversion_unit'] = $in_data_array[46];
+    $environmental_benefits_submission['avoided_land_conversion_unit_other'] = $in_data_array[47];
+    $environmental_benefits_submission['avoided_land_conversion_purpose'] = $in_data_array[48];
+    $environmental_benefits_submission['avoided_land_conversion_purpose_other'] = $in_data_array[49];
+    $environmental_benefits_submission['improved_wildlife_habitat'] = $in_data_array[50];
+    $environmental_benefits_submission['improved_wildlife_habitat_amount'] = $in_data_array[51];
+    $environmental_benefits_submission['improved_wildlife_habitat_unit'] = $in_data_array[52];
+    $environmental_benefits_submission['improved_wildlife_habitat_amount_unit_other'] = $in_data_array[53];
+    $environmental_benefits_submission['improved_wildlife_habitat_purpose'] = $in_data_array[54];
+    $environmental_benefits_submission['improved_wildlife_habitat_purpose_other'] = $in_data_array[55];
+    
+    $ps_to_save = Log::create($environmental_benefits_submission);
+
+    $ps_to_save->save();
+}
+
+function import_alley_cropping($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'ac'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_alley_cropping';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p311_species_category'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p311_species_density'] = $in_data_array[6];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_combustion_system_improvement($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'csi'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_combustion_sys_improvement';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p372_prior_fuel_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'fuel_type', 'name' => $in_data_array[5]]));
+    $supplemental_data_submission['csc_p372_prior_fuel_type_other'] = $in_data_array[6];
+    $supplemental_data_submission['csc_p372_prior_fuel_amount'] = $in_data_array[7];
+    $supplemental_data_submission['csc_p372_prior_fuel_amount_unit'] = $in_data_array[8];
+    $supplemental_data_submission['csc_p372_prior_fuel_amount_unit_other'] = $in_data_array[9];
+    $supplemental_data_submission['csc_p372_fuel_type_after'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'fuel_type', 'name' => $in_data_array[10]]));
+    $supplemental_data_submission['csc_p372_fuel_type_after_other'] = $in_data_array[11];
+    $supplemental_data_submission['csc_p372_fuel_amount_after'] = $in_data_array[12];
+    $supplemental_data_submission['csc_p372_fuel_amount_unit_after'] = $in_data_array[13];
+    $supplemental_data_submission['csc_p372_fuel_amount_unit_after_other'] = $in_data_array[14];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_conservation_cover($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'cc'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_conservation_cover';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p327_species_category'] = $in_data_array[5];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_conservation_crop_rotation($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'ccr'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_conservation_crop_rotation';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p328_conservation_crop_type'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p328_change_implemented'] = $in_data_array[6];
+    $supplemental_data_submission['csc_p328_rotation_tillage_type'] = $in_data_array[7];
+    $supplemental_data_submission['csc_p328_rotation_tillage_type_other'] = $in_data_array[8];
+    $supplemental_data_submission['csc_p328_total_rotation_length'] = $in_data_array[9];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_contour_buffer_strips($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'cbs'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_contour_buffer_strips';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p332_strip_width'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p332_species_category'] = $in_data_array[6];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_cover_crop($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'cocr'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_cover_crop';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p340_species_category'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p340_planned_management'] = $in_data_array[6];
+    $supplemental_data_submission['csc_p340_termination_method'] = $in_data_array[7];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_critical_area_planting($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'cap'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_critical_area_planting';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p342_species_category'] = $in_data_array[5];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_feed_management($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'fm'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_feed_management';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p592_crude_protein_percent'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p592_fat_percent'] = $in_data_array[6];
+    $supplemental_data_submission['csc_p592_feed_additives'] = $in_data_array[7];
+    $supplemental_data_submission['csc_p592_feed_additives_other'] = $in_data_array[8];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_field_border($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'fb'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_field_border';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p386_species_category'] = $in_data_array[5];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_filter_strip($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'fs'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_filter_strip';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p393_strip_width'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p393_species_category'] = $in_data_array[6];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_forest_farming($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'ff'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_forest_farming';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p379_land_use_previous_years'] = $in_data_array[5];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_forest_stand_improvement($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'fsi'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_forest_stand_improvement';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p666_implementation_purpose'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => '666_implementation_purpose', 'name' => $in_data_array[5]]));;
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_grassed_waterway($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'gw'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_grassed_waterway';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p412_species_category'] = $in_data_array[5];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_hedgerow_planting($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'hp'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_hedgerow_planting';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p422_species_category'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p422_species_density'] = $in_data_array[6];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_herbaceous_wind_barriers($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'hwb'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_herbaceous_wind_barriers';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p603_species_category'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p603_barrier_width'] = $in_data_array[6];
+    $supplemental_data_submission['csc_p603_number_of_rows'] = $in_data_array[7];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_mulching($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'm'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_mulching';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p484_mulch_type'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p484_mulch_coverage'] = $in_data_array[6];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_nutrient_management($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'nm'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_nutrient_management';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p590_nutrient_type'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'nutrient_type', 'name' => $in_data_array[5]]));
+    $supplemental_data_submission['csc_p590_application_method'] = $in_data_array[6];
+    $supplemental_data_submission['csc_p590_prior_application_method'] = $in_data_array[7];
+    $supplemental_data_submission['csc_p590_application_timing'] = $in_data_array[8];
+    $supplemental_data_submission['csc_p590_prior_application_timing'] = $in_data_array[9];
+    $supplemental_data_submission['csc_p590_application_rate'] = $in_data_array[10];
+    $supplemental_data_submission['csc_p590_application_rate_unit'] = $in_data_array[11];
+    $supplemental_data_submission['csc_p590_application_rate_change'] = $in_data_array[12];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_pasture_and_hay_planting($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'pahp'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_pasture_hay_planting';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p512_species_category'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p512_termination_process'] = $in_data_array[6];
+    $supplemental_data_submission['csc_p512_other_termination_process'] = $in_data_array[7];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_prescribed_grazing($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'pg'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_prescribed_grazing';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p528_grazing_type'] = $in_data_array[5];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_range_planting($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'rp'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_range_planting';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p550_species_category'] = $in_data_array[5];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_residue_and_tillage_management_notill($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'rtmnt'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_residue_tillage_no_till';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p329_surface_disturbance'] = $in_data_array[5];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_residue_and_tillage_management_redtill($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'rtmrt'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_residue_till_reduced_till';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p345_surface_disturbance'] = $in_data_array[5];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_riparian_forest_buffer($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'rfb'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_riparian_forest_buffer';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p391_species_category'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p391_species_density'] = $in_data_array[6];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+
+function import_riparian_herbaceous_cover($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'rhc'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_riparian_herbaceous_cover';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p390_species_category'] = $in_data_array[5];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+
+function import_roofs_and_covers($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'rac'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_roofs_and_covers';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p367_roof_cover_type'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p367_roof_cover_type_other'] = $in_data_array[6];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_silvopasture($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'silvop'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_silvopasture';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p381_species_category'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p381_species_density'] = $in_data_array[6];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+
+function import_stripcropping($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'strip'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_stripcropping';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p585_strip_width'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p585_crop_category'] = $in_data_array[6];
+    $supplemental_data_submission['csc_p585_number_of_strips'] = $in_data_array[7];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+
+function import_tree_shrub_establishment($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'tse'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_tree_shrub_establishment';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p612_species_category'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p612_species_density'] = $in_data_array[6];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_vegetative_barrier($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'vb'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_vegetative_barrier';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p601_species_category'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p601_barrier_width'] = $in_data_array[6];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_waste_separation_facility($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'wsepf'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_waste_separation_facility';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p632_separation_type'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p632_use_of_solids'] = $in_data_array[6];
+    $supplemental_data_submission['csc_p632_use_of_solids_other'] = $in_data_array[7];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+
+function import_waste_storage_facility($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'wstof'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_waste_storage_facility';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p313_prior_waste_storage_system'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'waste_storage_system', 'name' => $in_data_array[5]]));
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_waste_treatment($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'wt'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_waste_treatment';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p629_treatment_type'] = $in_data_array[5];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_waste_treatment_lagoon($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'wtl'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_waste_treatment_lagoon';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p359_prior_waste_storage_system'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'waste_storage_system', 'name' => $in_data_array[5]]));
+    $supplemental_data_submission['csc_p359_lagoon_cover_or_crust'] = filter_var($in_data_array[6], FILTER_VALIDATE_BOOLEAN);
+    $supplemental_data_submission['csc_p359_lagoon_aeration'] = filter_var($in_data_array[7], FILTER_VALIDATE_BOOLEAN);
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_windshelter_est_reno($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'wreno'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_windbreak_shelterbelt';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p380_species_category'] = $in_data_array[5];
+    $supplemental_data_submission['csc_p380_species_density'] = $in_data_array[6];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
+function import_anaerobic_digester($in_data_array, $cur_count){
+    $dateConst = date('mdYhis', time());
+    $entry_name = 'ad'. $dateConst . $cur_count;
+    $in_data_array = array_map('trim', $in_data_array);
+
+    $field_id = array_pop(\Drupal::entityTypeManager()->getStorage('asset')->loadByProperties(['type' => 'csc_field_enrollment', 'csc_f_enrollment_field_id' => $in_data_array[2]]));
+    $producer_id = $field_id->f_enrollment_producer_id->first()->get('entity')->getTarget()->getValue();
+    $project_id = $producer_id->project_id->first()->get('entity')->getTarget()->getValue();
+
+    $supplemental_data_submission = [];
+    $supplemental_data_submission['type'] = 'csc_anaerobic_digester';
+    $supplemental_data_submission['name'] = $entry_name;
+    $supplemental_data_submission['csc_field_id'] = $field_id;
+    $supplemental_data_submission['csc_project_id'] = $project_id;
+    $supplemental_data_submission['csc_p366_prior_waste_storage_system'] = array_pop(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'waste_storage_system', 'name' => $in_data_array[5]]));
+    $supplemental_data_submission['csc_p366_digester_type'] = $in_data_array[6];
+    $supplemental_data_submission['csc_p366_digester_type_other'] = $in_data_array[7];
+    $supplemental_data_submission['csc_p366_addtl_feedback_source'] = $in_data_array[8];
+    $supplemental_data_submission['csc_p366_addtl_feedback_source_other'] = $in_data_array[9];
+
+    $ps_to_save = Log::create($supplemental_data_submission);
+
+    $ps_to_save->save();
+}
+
 
 function convertExcelDate($inDate){
     $unixTimestamp = ($inDate - 25569) * 86400;
Only in ./web/modules/custom/csv_import_csc/src: Form
